using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MusicRecommender.Models;
using MusicRecommender.Services;
using System.Diagnostics;
using System.Text.Json;
using System.Text;

namespace MusicRecommender.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class MLTrainingController : ControllerBase
    {
        private readonly ApplicationDbContext _context;
        private readonly MLDataCollectionService _dataCollectionService;
        private readonly ILogger<MLTrainingController> _logger;

        public MLTrainingController(
            ApplicationDbContext context,
            MLDataCollectionService dataCollectionService,
            ILogger<MLTrainingController> logger)
        {
            _context = context;
            _dataCollectionService = dataCollectionService;
            _logger = logger;
        }

        /// <summary>
        /// –ó–±—ñ—Ä –Ω–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
        /// </summary>
        [HttpPost("collect-training-data")]
        public async Task<IActionResult> CollectTrainingData()
        {
            try
            {
                _logger.LogInformation("üîÑ –ó–∞–ø—É—Å–∫ –∑–±–æ—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...");
                
                var processedCount = await _dataCollectionService.CollectTrainingDataAsync();
                
                return Ok(new
                {
                    success = true,
                    message = $"–û–±—Ä–æ–±–ª–µ–Ω–æ {processedCount} –Ω–æ–≤–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π",
                    processedCount = processedCount,
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö");
                return StatusCode(500, new
                {
                    success = false,
                    message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–æ—Ä—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è ML –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        /// </summary>
        [HttpPost("user-profile/{userId}")]
        public async Task<IActionResult> UpdateUserProfile(int userId)
        {
            try
            {
                var profile = await _dataCollectionService.CreateOrUpdateUserProfileAsync(userId);
                
                return Ok(new
                {
                    success = true,
                    message = $"–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userId} –æ–Ω–æ–≤–ª–µ–Ω–æ",
                    profile = new
                    {
                        userId = profile.UserId,
                        totalInteractions = profile.TotalInteractions,
                        lastUpdated = profile.LastUpdated,
                        preferences = new
                        {
                            danceability = profile.PreferredDanceability,
                            energy = profile.PreferredEnergy,
                            valence = profile.PreferredValence,
                            tempo = profile.PreferredTempo
                        },
                        behavioral = new
                        {
                            skipRate = profile.SkipRate,
                            repeatRate = profile.RepeatRate,
                            explorationRate = profile.ExplorationRate
                        },
                        diversity = new
                        {
                            genreDiversity = profile.GenreDiversity,
                            artistDiversity = profile.ArtistDiversity
                        }
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);
                return StatusCode(500, new
                {
                    success = false,
                    message = $"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userId}",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ Python —Å–µ—Ä–≤—ñ—Å
        /// </summary>
        [HttpPost("train-models")]
        public async Task<IActionResult> TrainModels([FromBody] TrainModelsRequest? request = null)
        {
            try
            {
                _logger.LogInformation("üéØ –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...");

                // –°–ø–æ—á–∞—Ç–∫—É –∑–±–∏—Ä–∞—î–º–æ —Å–≤—ñ–∂—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                await _dataCollectionService.CollectTrainingDataAsync();

                // –í–∏–∫–ª–∏–∫–∞—î–º–æ Python ML —Å–µ—Ä–≤—ñ—Å
                var result = await CallPythonMLService("train", request);

                if (result.Success)
                {
                    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î (—è–∫—â–æ —î)
                    await SaveTrainingMetrics(result.Data);
                }

                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π");
                return StatusCode(500, new
                {
                    success = false,
                    message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—ñ –º–æ–¥–µ–ª–µ–π",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π —á–µ—Ä–µ–∑ –Ω–∞–≤—á–µ–Ω—ñ –º–æ–¥–µ–ª—ñ
        /// </summary>
        [HttpGet("recommendations/{userId}")]
        public async Task<IActionResult> GetMLRecommendations(int userId, 
            [FromQuery] string modelType = "hybrid", 
            [FromQuery] int limit = 20)
        {
            try
            {
                var request = new
                {
                    user_id = userId,
                    model_type = modelType,
                    limit = limit
                };

                var result = await CallPythonMLService("recommend", request);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);
                return StatusCode(500, new
                {
                    success = false,
                    message = $"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {userId}",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        /// </summary>
        [HttpGet("training-data/stats")]
        public async Task<IActionResult> GetTrainingDataStats()
        {
            try
            {
                var stats = new
                {
                    // –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ MLTrainingData
                    totalTrainingRecords = await _context.MLTrainingData.CountAsync(),
                    uniqueUsers = await _context.MLTrainingData.Select(m => m.UserId).Distinct().CountAsync(),
                    uniqueTracks = await _context.MLTrainingData.Select(m => m.SpotifyTrackId).Distinct().CountAsync(),
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
                    interactionTypes = await _context.MLTrainingData
                        .GroupBy(m => m.InteractionType)
                        .Select(g => new { type = g.Key, count = g.Count() })
                        .ToListAsync(),
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
                    ratingStats = await _context.MLTrainingData
                        .GroupBy(m => new { })
                        .Select(g => new
                        {
                            avgRating = g.Average(x => x.Rating),
                            minRating = g.Min(x => x.Rating),
                            maxRating = g.Max(x => x.Rating)
                        })
                        .FirstOrDefaultAsync(),
                    
                    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
                    userProfiles = await _context.MLUserProfiles.CountAsync(),
                    
                    // –û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
                    recentTrainings = await _context.MLModelMetrics
                        .OrderByDescending(m => m.TrainingDate)
                        .Take(5)
                        .Select(m => new
                        {
                            modelType = m.ModelType,
                            version = m.ModelVersion,
                            trainingDate = m.TrainingDate,
                            mae = m.MAE,
                            mse = m.MSE,
                            trainingSamples = m.TrainingSamples
                        })
                        .ToListAsync(),
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
                    weeklyStats = await GetWeeklyStats()
                };

                return Ok(stats);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
                return StatusCode(500, new
                {
                    success = false,
                    message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        /// </summary>
        [HttpDelete("training-data/cleanup")]
        public async Task<IActionResult> CleanupOldTrainingData([FromQuery] int maxAgeDays = 365)
        {
            try
            {
                var maxAge = TimeSpan.FromDays(maxAgeDays);
                var deletedCount = await _dataCollectionService.CleanupOldTrainingDataAsync(maxAge);

                return Ok(new
                {
                    success = true,
                    message = $"–í–∏–¥–∞–ª–µ–Ω–æ {deletedCount} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤",
                    deletedCount = deletedCount,
                    maxAgeDays = maxAgeDays
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö");
                return StatusCode(500, new
                {
                    success = false,
                    message = "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö",
                    error = ex.Message
                });
            }
        }

        /// <summary>
        /// –°—Ç–∞—Ç—É—Å ML —Å–µ—Ä–≤—ñ—Å—É
        /// </summary>
        [HttpGet("service/status")]
        public async Task<IActionResult> GetMLServiceStatus()
        {
            try
            {
                var result = await CallPythonMLService("status", null);
                return Ok(result);
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ö†Ô∏è ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
                return Ok(new
                {
                    success = false,
                    message = "ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                    error = ex.Message,
                    isOnline = false
                });
            }
        }

        #region Private Methods

        /// <summary>
        /// –í–∏–∫–ª–∏–∫ Python ML —Å–µ—Ä–≤—ñ—Å—É
        /// </summary>
        private async Task<dynamic> CallPythonMLService(string endpoint, object? data)
        {
            using var httpClient = new HttpClient();
            httpClient.Timeout = TimeSpan.FromMinutes(10); // –î–æ–≤–≥–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
            
            var mlServiceUrl = "http://localhost:8000"; // –ú–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
            var url = $"{mlServiceUrl}/{endpoint}";

            HttpResponseMessage response;
            
            if (data != null)
            {
                var json = JsonSerializer.Serialize(data);
                var content = new StringContent(json, Encoding.UTF8, "application/json");
                response = await httpClient.PostAsync(url, content);
            }
            else
            {
                response = await httpClient.GetAsync(url);
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            
            if (response.IsSuccessStatusCode)
            {
                return new
                {
                    Success = true,
                    Data = JsonSerializer.Deserialize<object>(responseContent),
                    StatusCode = (int)response.StatusCode
                };
            }
            else
            {
                return new
                {
                    Success = false,
                    Message = $"ML —Å–µ—Ä–≤—ñ—Å –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É: {response.StatusCode}",
                    Data = responseContent,
                    StatusCode = (int)response.StatusCode
                };
            }
        }

        /// <summary>
        /// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –≤ –ë–î
        /// </summary>
        private async Task SaveTrainingMetrics(object? metricsData)
        {
            if (metricsData == null) return;

            try
            {
                // –¢—É—Ç –º–æ–∂–Ω–∞ –ø–∞—Ä—Å–∏—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ —ñ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ MLModelMetrics
                var metricsJson = JsonSerializer.Serialize(metricsData);
                _logger.LogInformation("üìä –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {Metrics}", metricsJson);
                
                // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–∞—Ä—Å–∏–Ω–≥ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è");
            }
        }

        /// <summary>
        /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
        /// </summary>
        private async Task<object> GetWeeklyStats()
        {
            var weekAgo = DateTime.UtcNow.AddDays(-7);
            
            return new
            {
                newTrainingRecords = await _context.MLTrainingData
                    .Where(m => m.Timestamp >= weekAgo)
                    .CountAsync(),
                    
                newUserProfiles = await _context.MLUserProfiles
                    .Where(p => p.LastUpdated >= weekAgo)
                    .CountAsync(),
                    
                modelTrainings = await _context.MLModelMetrics
                    .Where(m => m.TrainingDate >= weekAgo)
                    .CountAsync()
            };
        }

        #endregion
    }

    /// <summary>
    /// –ó–∞–ø–∏—Ç –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    /// </summary>
    public class TrainModelsRequest
    {
        public string[]? ModelTypes { get; set; } // ["content", "collaborative", "hybrid"]
        public int? MinInteractionsPerUser { get; set; } = 5;
        public bool? IncludeSkips { get; set; } = false;
        public int? TimeWindowDays { get; set; } = null;
        public Dictionary<string, object>? Parameters { get; set; }
    }
} 