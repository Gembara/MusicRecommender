// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicRecommender.Models;

#nullable disable

namespace MusicRecommender.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250603152935_FixFavoritesId")]
    partial class FixFavoritesId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MusicRecommender.Models.Favorite", b =>
                {
                    b.Property<string>("SpotifyTrackId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedToFavoritesAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SpotifyTrackId");

                    b.ToTable("Favorites", (string)null);
                });

            modelBuilder.Entity("MusicRecommender.Models.Song", b =>
                {
                    b.Property<string>("SpotifyTrackId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Acousticness")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("AddedToFavoritesAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Danceability")
                        .HasColumnType("REAL");

                    b.Property<int>("DurationMs")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Energy")
                        .HasColumnType("REAL");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Instrumentalness")
                        .HasColumnType("REAL");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ListenedAt")
                        .HasColumnType("TEXT");

                    b.Property<float>("Loudness")
                        .HasColumnType("REAL");

                    b.Property<int>("Mode")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Popularity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreviewUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Speechiness")
                        .HasColumnType("REAL");

                    b.Property<float>("Tempo")
                        .HasColumnType("REAL");

                    b.Property<float>("TimeSignature")
                        .HasColumnType("REAL");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Valence")
                        .HasColumnType("REAL");

                    b.HasKey("SpotifyTrackId");

                    b.ToTable("History", (string)null);
                });

            modelBuilder.Entity("MusicRecommender.Models.SongFeatures", b =>
                {
                    b.Property<string>("SpotifyTrackId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Acousticness")
                        .HasColumnType("REAL");

                    b.Property<string>("Artist")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Danceability")
                        .HasColumnType("REAL");

                    b.Property<float>("DurationMs")
                        .HasColumnType("REAL");

                    b.Property<float>("Energy")
                        .HasColumnType("REAL");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Instrumentalness")
                        .HasColumnType("REAL");

                    b.Property<float>("Key")
                        .HasColumnType("REAL");

                    b.Property<float>("Loudness")
                        .HasColumnType("REAL");

                    b.Property<float>("Mode")
                        .HasColumnType("REAL");

                    b.Property<float>("Popularity")
                        .HasColumnType("REAL");

                    b.Property<float>("Speechiness")
                        .HasColumnType("REAL");

                    b.Property<float>("Tempo")
                        .HasColumnType("REAL");

                    b.Property<float>("TimeSignature")
                        .HasColumnType("REAL");

                    b.Property<float>("Valence")
                        .HasColumnType("REAL");

                    b.HasKey("SpotifyTrackId");

                    b.ToTable("SongFeatures", (string)null);
                });

            modelBuilder.Entity("MusicRecommender.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("AvgAcousticness")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgDanceability")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgEnergy")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgInstrumentalness")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgLoudness")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgSpeechiness")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgTempo")
                        .HasColumnType("REAL");

                    b.Property<float>("AvgValence")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PreferredGenres")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MusicRecommender.Models.UserSongInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InteractionTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("InteractionType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRepeat")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayDuration")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Rating")
                        .HasColumnType("REAL");

                    b.Property<string>("SpotifyTrackId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserSongInteractions", (string)null);
                });

            modelBuilder.Entity("MusicRecommender.Models.UserSongInteraction", b =>
                {
                    b.HasOne("MusicRecommender.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
