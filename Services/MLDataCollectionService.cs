using Microsoft.EntityFrameworkCore;
using MusicRecommender.Models;
using System.Text.Json;

namespace MusicRecommender.Services
{
    public class MLDataCollectionService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<MLDataCollectionService> _logger;

        public MLDataCollectionService(ApplicationDbContext context, ILogger<MLDataCollectionService> logger)
        {
            _context = context;
            _logger = logger;
        }

        /// <summary>
        /// –ó–±—ñ—Ä –Ω–æ–≤–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π
        /// </summary>
        public async Task<int> CollectTrainingDataAsync()
        {
            _logger.LogInformation("üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –∑–±—ñ—Ä —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...");

            var lastCollectionTime = await GetLastCollectionTimeAsync();
            var newInteractions = await GetNewInteractionsAsync(lastCollectionTime);

            _logger.LogInformation($"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {newInteractions.Count} –Ω–æ–≤–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π");

            int processedCount = 0;
            foreach (var interaction in newInteractions)
            {
                try
                {
                    await ProcessInteractionAsync(interaction);
                    processedCount++;
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó {InteractionId}", interaction.Id);
                }
            }

            await UpdateCollectionTimestampAsync();
            
            _logger.LogInformation($"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {processedCount} –≤–∑–∞—î–º–æ–¥—ñ–π");
            return processedCount;
        }

        /// <summary>
        /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        /// </summary>
        private async Task ProcessInteractionAsync(UserSongInteraction interaction)
        {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ –∑–∞–ø–∏—Å
            var existing = await _context.MLTrainingData
                .FirstOrDefaultAsync(m => m.UserId == interaction.UserId && 
                                        m.SpotifyTrackId == interaction.SpotifyTrackId);

            if (existing != null) return; // –í–∂–µ –æ–±—Ä–æ–±–∏–ª–∏ —Ü—é –≤–∑–∞—î–º–æ–¥—ñ—é

            // –û—Ç—Ä–∏–º—É—î–º–æ —Ñ—ñ—á—ñ —Ç—Ä–µ–∫—É
            var songFeatures = await _context.SongFeatures
                .FirstOrDefaultAsync(sf => sf.SpotifyTrackId == interaction.SpotifyTrackId);

            if (songFeatures == null)
            {
                _logger.LogWarning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ—ñ—á—ñ –¥–ª—è —Ç—Ä–µ–∫—É {TrackId}", interaction.SpotifyTrackId);
                return;
            }

            // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–∫
            var song = await _context.History
                .FirstOrDefaultAsync(s => s.SpotifyTrackId == interaction.SpotifyTrackId);

            // –û–±—á–∏—Å–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤–∑–∞—î–º–æ–¥—ñ—ó
            var userProfile = await CalculateUserProfileAsync(interaction.UserId, interaction.InteractionTime);

            // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –≤–∑–∞—î–º–æ–¥—ñ—ó
            float rating = CalculateRatingFromInteraction(interaction);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            var trainingData = new MLTrainingData
            {
                UserId = interaction.UserId,
                SpotifyTrackId = interaction.SpotifyTrackId,
                
                // –ê—É–¥—ñ–æ —Ñ—ñ—á—ñ
                Danceability = songFeatures.Danceability,
                Energy = songFeatures.Energy,
                Valence = songFeatures.Valence,
                Tempo = songFeatures.Tempo,
                Acousticness = songFeatures.Acousticness,
                Instrumentalness = songFeatures.Instrumentalness,
                Speechiness = songFeatures.Speechiness,
                Loudness = songFeatures.Loudness,
                Popularity = songFeatures.Popularity,
                DurationMs = songFeatures.DurationMs,
                Key = (int)songFeatures.Key,
                Mode = (int)songFeatures.Mode,
                TimeSignature = (int)songFeatures.TimeSignature,
                
                // –ú–µ—Ç–∞-–¥–∞–Ω—ñ
                Artist = song?.Artist ?? songFeatures.Artist ?? "Unknown",
                Genre = songFeatures.Genre ?? song?.Genre ?? "Unknown",
                ReleaseYear = 2023, // Default for now since Song model doesn't have ReleaseYear
                ArtistPopularity = 50.0f, // Default for now since SongFeatures doesn't have ArtistPopularity
                
                // –í–∑–∞—î–º–æ–¥—ñ—è
                Rating = rating,
                InteractionType = (int)interaction.InteractionType,
                PlayCount = interaction.IsRepeat ? 2 : 1, // Estimating PlayCount
                PlayDuration = CalculatePlayDurationPercentage(interaction),
                
                // –ö–æ–Ω—Ç–µ–∫—Å—Ç
                ListeningContext = DetermineListeningContext(interaction.InteractionTime),
                Timestamp = interaction.InteractionTime,
                
                // –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                UserAvgDanceability = userProfile.AvgDanceability,
                UserAvgEnergy = userProfile.AvgEnergy,
                UserAvgValence = userProfile.AvgValence,
                UserAvgTempo = userProfile.AvgTempo
            };

            _context.MLTrainingData.Add(trainingData);
            await _context.SaveChangesAsync();
        }

        /// <summary>
        /// –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –ø–µ–≤–Ω–∏–π –º–æ–º–µ–Ω—Ç —á–∞—Å—É
        /// </summary>
        private async Task<(float AvgDanceability, float AvgEnergy, float AvgValence, float AvgTempo)> 
            CalculateUserProfileAsync(int userId, DateTime timestamp)
        {
            // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 50 –≤–∑–∞—î–º–æ–¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ —á–∞—Å—É
            var recentInteractions = await _context.UserSongInteractions
                .Where(i => i.UserId == userId && i.InteractionTime < timestamp)
                .OrderByDescending(i => i.InteractionTime)
                .Take(50)
                .Select(i => i.SpotifyTrackId)
                .ToListAsync();

            if (!recentInteractions.Any())
                return (0.5f, 0.5f, 0.5f, 120f); // –î–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è

            var features = await _context.SongFeatures
                .Where(sf => recentInteractions.Contains(sf.SpotifyTrackId))
                .ToListAsync();

            if (!features.Any())
                return (0.5f, 0.5f, 0.5f, 120f);

            return (
                features.Average(f => f.Danceability),
                features.Average(f => f.Energy),
                features.Average(f => f.Valence),
                features.Average(f => f.Tempo)
            );
        }

        /// <summary>
        /// –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó
        /// </summary>
        private float CalculateRatingFromInteraction(UserSongInteraction interaction)
        {
            // –ë–∞–∑–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –≤–∑–∞—î–º–æ–¥—ñ—ó
            float baseRating = interaction.InteractionType switch
            {
                InteractionType.Liked => 1.0f,
                InteractionType.AddedToPlaylist => 0.9f,
                InteractionType.Repeated => 0.8f,
                InteractionType.Played => 0.6f,
                InteractionType.Skipped => 0.1f,
                InteractionType.Disliked => 0.0f,
                _ => 0.5f
            };

            // –ú–æ–¥–∏—Ñ—ñ–∫—É—î–º–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
            if (interaction.PlayDuration > 0)
            {
                // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—Ä–µ–∫—É 180 —Å–µ–∫—É–Ω–¥
                float playPercentage = Math.Min(interaction.PlayDuration / 180f, 1.0f);
                if (playPercentage < 0.1f) // –º–µ–Ω—à–µ 10% - —Å–∫—ñ–ø
                    baseRating = Math.Min(baseRating, 0.2f);
                else if (playPercentage > 0.8f) // –±—ñ–ª—å—à–µ 80% - —Ö–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª
                    baseRating = Math.Min(baseRating + 0.2f, 1.0f);
            }

            // –ë–æ–Ω—É—Å–∏/—à—Ç—Ä–∞—Ñ–∏
            if (interaction.IsLiked) baseRating = Math.Min(baseRating + 0.3f, 1.0f);
            if (interaction.IsSkipped) baseRating = Math.Max(baseRating - 0.4f, 0.0f);
            if (interaction.IsRepeat) baseRating = Math.Min(baseRating + 0.1f, 1.0f);

            return Math.Max(0.0f, Math.Min(1.0f, baseRating));
        }

        /// <summary>
        /// –û–±—á–∏—Å–ª–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
        /// </summary>
        private float CalculatePlayDurationPercentage(UserSongInteraction interaction)
        {
            if (interaction.PlayDuration <= 0) return 0.0f;
            
            // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç—Ä–µ–∫—É 180 —Å–µ–∫—É–Ω–¥ (3 —Ö–≤–∏–ª–∏–Ω–∏)
            float approximateTrackDuration = 180f;
            return Math.Min(interaction.PlayDuration / approximateTrackDuration, 1.0f);
        }

        /// <summary>
        /// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
        /// </summary>
        private string DetermineListeningContext(DateTime timestamp)
        {
            var hour = timestamp.Hour;
            return hour switch
            {
                >= 6 and < 12 => "morning",
                >= 12 and < 17 => "afternoon",
                >= 17 and < 22 => "evening",
                _ => "night"
            };
        }

        /// <summary>
        /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        /// </summary>
        private async Task<List<UserSongInteraction>> GetNewInteractionsAsync(DateTime since)
        {
            return await _context.UserSongInteractions
                .Where(i => i.InteractionTime > since)
                .OrderBy(i => i.InteractionTime)
                .ToListAsync();
        }

        /// <summary>
        /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
        /// </summary>
        private async Task<DateTime> GetLastCollectionTimeAsync()
        {
            var lastRecord = await _context.MLTrainingData
                .OrderByDescending(m => m.Timestamp)
                .FirstOrDefaultAsync();

            return lastRecord?.Timestamp ?? DateTime.MinValue;
        }

        /// <summary>
        /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ—Ç–∫–∏ —á–∞—Å—É –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
        /// </summary>
        private async Task UpdateCollectionTimestampAsync()
        {
            // –ú–æ–∂–Ω–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ –æ–∫—Ä–µ–º—ñ–π —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
            _logger.LogInformation("üìÖ –û–Ω–æ–≤–ª–µ–Ω–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–æ—Ä—É: {Time}", DateTime.UtcNow);
        }

        /// <summary>
        /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è ML –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        /// </summary>
        public async Task<MLUserProfile> CreateOrUpdateUserProfileAsync(int userId)
        {
            _logger.LogInformation("üë§ –û–Ω–æ–≤–ª–µ–Ω–Ω—è ML –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);

            var existingProfile = await _context.MLUserProfiles
                .FirstOrDefaultAsync(p => p.UserId == userId);

            // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            var userTrainingData = await _context.MLTrainingData
                .Where(m => m.UserId == userId)
                .ToListAsync();

            if (!userTrainingData.Any())
            {
                _logger.LogWarning("‚ö†Ô∏è –ù–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);
                return existingProfile ?? new MLUserProfile { UserId = userId };
            }

            // –û–±—á–∏—Å–ª—é—î–º–æ –º—É–∑–∏—á–Ω—ñ –ø–µ—Ä–µ–≤–∞–≥–∏
            var preferences = CalculatePreferences(userTrainingData);
            var behavioral = CalculateBehavioralPatterns(userTrainingData);
            var diversity = await CalculateDiversityMetricsAsync(userTrainingData);

            var profile = existingProfile ?? new MLUserProfile { UserId = userId };
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
            profile.PreferredDanceability = preferences.Danceability;
            profile.PreferredEnergy = preferences.Energy;
            profile.PreferredValence = preferences.Valence;
            profile.PreferredTempo = preferences.Tempo;
            profile.PreferredAcousticness = preferences.Acousticness;
            profile.PreferredInstrumentalness = preferences.Instrumentalness;
            profile.PreferredSpeechiness = preferences.Speechiness;
            profile.PreferredLoudness = preferences.Loudness;
            
            profile.DanceabilityVariance = preferences.DanceabilityVar;
            profile.EnergyVariance = preferences.EnergyVar;
            profile.ValenceVariance = preferences.ValenceVar;
            profile.TempoVariance = preferences.TempoVar;
            
            profile.SkipRate = behavioral.SkipRate;
            profile.RepeatRate = behavioral.RepeatRate;
            profile.ExplorationRate = behavioral.ExplorationRate;
            
            profile.GenreDiversity = diversity.GenreDiversity;
            profile.ArtistDiversity = diversity.ArtistDiversity;
            
            profile.LastUpdated = DateTime.UtcNow;
            profile.TotalInteractions = userTrainingData.Count;

            if (existingProfile == null)
                _context.MLUserProfiles.Add(profile);
            
            await _context.SaveChangesAsync();
            
            _logger.LogInformation("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ ML –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {UserId}", userId);
            return profile;
        }

        private (float Danceability, float Energy, float Valence, float Tempo, 
                float Acousticness, float Instrumentalness, float Speechiness, float Loudness,
                float DanceabilityVar, float EnergyVar, float ValenceVar, float TempoVar) 
            CalculatePreferences(List<MLTrainingData> data)
        {
            // –ó–≤–∞–∂—É—î–º–æ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º - –±—ñ–ª—å—à–∏–π –≤–ø–ª–∏–≤ —Ç—Ä–µ–∫—ñ–≤ –∑ –≤–∏—â–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            var weightedData = data.Where(d => d.Rating > 0.3f).ToList(); // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–∫—ñ–ø–∏
            
            if (!weightedData.Any()) return (0.5f, 0.5f, 0.5f, 120f, 0.5f, 0.5f, 0.5f, -10f, 0.1f, 0.1f, 0.1f, 30f);

            var totalWeight = weightedData.Sum(d => d.Rating);
            
            return (
                weightedData.Sum(d => d.Danceability * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Energy * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Valence * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Tempo * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Acousticness * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Instrumentalness * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Speechiness * d.Rating) / totalWeight,
                weightedData.Sum(d => d.Loudness * d.Rating) / totalWeight,
                
                // –í–∞—Ä—ñ–∞–Ω—Å–∏
                CalculateVariance(weightedData.Select(d => d.Danceability)),
                CalculateVariance(weightedData.Select(d => d.Energy)),
                CalculateVariance(weightedData.Select(d => d.Valence)),
                CalculateVariance(weightedData.Select(d => d.Tempo))
            );
        }

        private (float SkipRate, float RepeatRate, float ExplorationRate) 
            CalculateBehavioralPatterns(List<MLTrainingData> data)
        {
            if (!data.Any()) return (0f, 0f, 0.5f);

            var skipRate = data.Count(d => d.InteractionType == (int)InteractionType.Skipped) / (float)data.Count;
            var repeatRate = data.Count(d => d.PlayCount > 1) / (float)data.Count;
            
            // Exploration rate - —Å–∫—ñ–ª—å–∫–∏ —Ä—ñ–∑–Ω–∏—Ö –∞—Ä—Ç–∏—Å—Ç—ñ–≤/–∂–∞–Ω—Ä—ñ–≤
            var uniqueArtists = data.Select(d => d.Artist).Distinct().Count();
            var explorationRate = Math.Min(uniqueArtists / (float)data.Count, 1.0f);

            return (skipRate, repeatRate, explorationRate);
        }

        private async Task<(float GenreDiversity, float ArtistDiversity)> 
            CalculateDiversityMetricsAsync(List<MLTrainingData> data)
        {
            if (!data.Any()) return (0f, 0f);

            var uniqueGenres = data.Select(d => d.Genre).Distinct().Count();
            var uniqueArtists = data.Select(d => d.Artist).Distinct().Count();
            
            var genreDiversity = uniqueGenres / (float)Math.Min(data.Count, 20); // –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
            var artistDiversity = uniqueArtists / (float)Math.Min(data.Count, 50);

            return (Math.Min(genreDiversity, 1.0f), Math.Min(artistDiversity, 1.0f));
        }

        private float CalculateVariance(IEnumerable<float> values)
        {
            var list = values.ToList();
            if (list.Count < 2) return 0f;
            
            var mean = list.Average();
            var variance = list.Sum(x => (x - mean) * (x - mean)) / list.Count;
            return (float)Math.Sqrt(variance); // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        }

        /// <summary>
        /// –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        /// </summary>
        public async Task<int> CleanupOldTrainingDataAsync(TimeSpan maxAge)
        {
            var cutoffDate = DateTime.UtcNow - maxAge;
            
            var oldData = await _context.MLTrainingData
                .Where(m => m.Timestamp < cutoffDate)
                .ToListAsync();

            if (oldData.Any())
            {
                _context.MLTrainingData.RemoveRange(oldData);
                await _context.SaveChangesAsync();
                
                _logger.LogInformation("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {Count} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö", oldData.Count);
            }

            return oldData.Count;
        }
    }
} 