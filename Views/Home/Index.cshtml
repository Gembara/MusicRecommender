@{
    ViewData["Title"] = "–ì–æ–ª–æ–≤–Ω–∞";
}

@section Styles {
    <link rel="stylesheet" href="~/css/search.css" />
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 text-center mb-4">
            <h1 class="display-4 mb-3">üéµ –ú—É–∑–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h1>
            <p class="lead text-muted">–ó–Ω–∞–π–¥—ñ—Ç—å –Ω–æ–≤—É –º—É–∑–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤</p>
        </div>
        <div class="col-md-8">
            <div class="search-wrapper">
                <div class="search-container">
                    <div class="search-input-wrapper">
                        <span class="search-icon">
                            <svg width="24" height="24" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M15.5 14h-.79l-.28-.27a6.5 6.5 0 1 0-.7.7l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0A4.5 4.5 0 1 1 14 9.5 4.5 4.5 0 0 1 9.5 14z"/>
                            </svg>
                        </span>
                        <input type="text" 
                               class="search-input" 
                               id="artistSearch" 
                               placeholder="–ó–Ω–∞–π—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤—Ü—è..."
                               autocomplete="off">
                        <span class="clear-search" id="clearSearch">‚úï</span>
                    </div>
                    <div id="searchResults" class="search-results"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- –ö–Ω–æ–ø–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-8 text-center">
            <div class="recommendations-section">
                <h4 class="mb-3">–ê–±–æ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h4>
                <a href="@Url.Action("SimpleRecommendations", "Home")" class="btn btn-primary btn-lg">
                    <svg width="20" height="20" viewBox="0 0 24 24" style="margin-right: 8px;">
                        <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                    </svg>
                    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –º–µ–Ω–µ
                </a>
                <p class="text-muted mt-2 small">–ù–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω—å</p>
            </div>
        </div>
    </div>
</div>

<div id="spotifyPlayer"></div>

@section Scripts {
    <script src="https://sdk.scdn.co/spotify-player.js"></script>
<script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('artistSearch');
            const searchResults = document.getElementById('searchResults');
            const clearSearch = document.getElementById('clearSearch');
            const spotifyPlayerContainer = document.getElementById('spotifyPlayer');
            let selectedIndex = -1;
            let searchTimeout = null;
            let currentRequest = null;
            let allItems = [];
            let currentlyPlaying = null;

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–æ—à—É–∫—É
            function createSearchItem(item) {
                const div = document.createElement('div');
                div.className = 'search-item';
                if (item.type === 'track') {
                    div.dataset.trackId = item.id;
                }
                
                let icon, imageStyle;
                if (item.type === 'artist') {
                    icon = 'üë§';
                    imageStyle = item.imageUrl ? `background-image: url('${item.imageUrl}')` : '';
                } else if (item.type === 'track') {
                    icon = 'üéµ';
                    imageStyle = item.imageUrl ? `background-image: url('${item.imageUrl}')` : '';
                }

                const playButton = item.type === 'track' ? `
                    <div class="play-button">
                        <svg viewBox="0 0 24 24">
                            <path d="M8 5v14l11-7z"/>
                        </svg>
                    </div>
                ` : '';
                
                div.innerHTML = `
                    <div class="search-item-image ${imageStyle ? '' : item.type}" style="${imageStyle}">
                        ${imageStyle ? '' : icon}
                        ${playButton}
                    </div>
                    <div class="search-item-info">
                        <div class="search-item-title">${item.name}</div>
                        <div class="search-item-subtitle">
                            ${item.type === 'track' ? item.artistName : '–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å'}
                        </div>
                    </div>
                    ${item.type === 'track' ? `
                        <div class="search-item-actions">
                            <button class="favorite-btn" data-track-id="${item.id}" title="–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ">
                                <i class="far fa-heart"></i>
                            </button>
                        </div>
                    ` : ''}
                `;
                
                if (item.type === 'track') {
                    const favoriteButton = div.querySelector('.favorite-btn');
                    
                    favoriteButton.addEventListener('click', async (e) => {
                        e.stopPropagation();
                        
                        // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
                        favoriteButton.classList.add('animating');
                        setTimeout(() => {
                            favoriteButton.classList.remove('animating');
                        }, 600);
                        
                        // –ü—Ä–æ—Å—Ç—ñ—à–µ —Ä—ñ—à–µ–Ω–Ω—è - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —ñ–Ω–ª–∞–π–Ω
                        try {
                            const authResponse = await fetch('/api/Auth/current');
                            const authData = await authResponse.json();
                            
                            if (!authData.isLoggedIn) {
                                showNotificationSimple('–°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É', 'error');
                                return;
                            }
                        } catch (error) {
                            showNotificationSimple('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó', 'error');
                            return;
                        }
                        
                        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ —Ç—Ä–µ–∫ –≤–∂–µ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö
                        const icon = favoriteButton.querySelector('i');
                        const isCurrentlyFavorite = icon.classList.contains('fas');
                        
                        if (isCurrentlyFavorite) {
                            // –í–∏–¥–∞–ª—è—î–º–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
                            try {
                                const response = await fetch(`/api/Favorites/remove/${item.id}`, {
                                    method: 'DELETE'
                                });
                                
                                if (response.ok) {
                                    icon.className = 'far fa-heart';
                                    favoriteButton.title = '–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω—ñ';
                                    showNotificationSimple('–í–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö', 'success');
                                } else {
                                    showNotificationSimple('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ', 'error');
                                }
                            } catch (error) {
                                showNotificationSimple('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ', 'error');
                            }
                        } else {
                            // –î–æ–¥–∞—î–º–æ –≤ —É–ª—é–±–ª–µ–Ω—ñ
                            try {
                                const response = await fetch('/api/Favorites/add', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        spotifyTrackId: item.id,
                                        title: item.name,
                                        artist: item.artistName,
                                        imageUrl: item.imageUrl
                                    })
                                });
                                
                                if (response.ok) {
                                    icon.className = 'fas fa-heart';
                                    favoriteButton.title = '–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö';
                                    showNotificationSimple('–î–æ–¥–∞–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω—ñ!', 'success');
                                } else {
                                    showNotificationSimple('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ', 'error');
                                }
                            } catch (error) {
                                showNotificationSimple('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ', 'error');
                            }
                        }
                    });
                }
                
                div.addEventListener('mouseover', () => {
                    selectItem(allItems.indexOf(div));
                });
                
                return div;
            }

            // –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–∫—É —á–µ—Ä–µ–∑ Spotify
            function playSpotifyTrack(trackId, element) {
                if (currentlyPlaying) {
                    currentlyPlaying.classList.remove('playing');
                }

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
                const title = element.querySelector('.search-item-title').textContent;
                const artist = element.querySelector('.search-item-subtitle').textContent;
                const imageUrl = element.querySelector('.search-item-image').style.backgroundImage
                    .replace(/^url\(['"](.+)['"]\)$/, '$1');

                const songData = {
                    title: title,
                    artist: artist,
                    spotifyTrackId: trackId,
                    imageUrl: imageUrl,
                    listenedAt: new Date().toISOString()
                };

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
                fetch('/api/History/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify(songData)
                })
                .then(response => {
                    if (!response.ok) {
                        return response.text().then(text => {
                            throw new Error(`Failed to save to history: ${text}`);
                    });
                    }
                    console.log('Successfully saved to history');
                })
                .catch(error => {
                    console.error('Error saving to history:', error);
                    showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ —ñ—Å—Ç–æ—Ä—ñ—é', 'error');
                });

                // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ —Ç—Ä–µ–∫
                spotifyPlayer.playTrack(trackId, title, artist, imageUrl);

                currentlyPlaying = element;
                element.classList.add('playing');
            }

            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
            async function fetchResults(query) {
                if (currentRequest) {
                    currentRequest.abort();
                }

                try {
                    const controller = new AbortController();
                    currentRequest = controller;

                    const response = await fetch(`/Home/Autocomplete?q=${encodeURIComponent(query)}`, {
                        signal: controller.signal
                    });

                    if (!response.ok) throw new Error('Network response was not ok');
                    return await response.json();
                } catch (error) {
                    if (error.name === 'AbortError') return null;
                    throw error;
                } finally {
                    currentRequest = null;
                }
            }

            // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            function displayResults(results) {
                searchResults.innerHTML = '';
                allItems = [];
                
                if (!results || (!results.artists.length && !results.songs.length)) {
                    searchResults.innerHTML = '<div class="no-results">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</div>';
                    searchResults.style.display = 'block';
                    return;
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –∞—Ä—Ç–∏—Å—Ç—ñ–≤
                if (results.artists.length > 0) {
                    const artistsSection = document.createElement('div');
                    artistsSection.className = 'search-section';
                    artistsSection.innerHTML = '<h3>–í–∏–∫–æ–Ω–∞–≤—Ü—ñ</h3>';
                    results.artists.forEach(artist => {
                        const div = createSearchItem(artist);
                        div.addEventListener('click', async () => {
                            try {
                                const response = await fetch(`/Home/GetArtistTracks?artistId=${artist.id}`);
                                if (!response.ok) {
                                    throw new Error('Failed to fetch artist tracks');
                                }
                                const tracks = await response.json();
                                displayResults({ artists: [], songs: tracks });
                            } catch (error) {
                                console.error('Error fetching artist tracks:', error);
                                showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç—Ä–µ–∫—ñ–≤ –∞—Ä—Ç–∏—Å—Ç–∞', 'error');
                            }
                        });
                        artistsSection.appendChild(div);
                        allItems.push(div);
                    });
                    searchResults.appendChild(artistsSection);
                }

                // –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ—Å–Ω—ñ
                if (results.songs.length > 0) {
                    const songsSection = document.createElement('div');
                    songsSection.className = 'search-section';
                    songsSection.innerHTML = '<h3>–ü—ñ—Å–Ω—ñ</h3>';
                    results.songs.forEach(song => {
                        const div = createSearchItem(song);
                        div.addEventListener('click', () => {
                            playSpotifyTrack(song.id, div);
                        });
                        songsSection.appendChild(div);
                        allItems.push(div);
                    });
                    searchResults.appendChild(songsSection);
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è –≤—Å—ñ—Ö —Ç—Ä–µ–∫—ñ–≤
                    checkAndUpdateFavoriteStatus();
                }
                
                searchResults.style.display = 'block';
            }

            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è –≤—Å—ñ—Ö —Ç—Ä–µ–∫—ñ–≤
            async function checkAndUpdateFavoriteStatus() {
                try {
                    const authResponse = await fetch('/api/Auth/current');
                    const authData = await authResponse.json();
                    
                    if (!authData.isLoggedIn) return;
                    
                    const favoriteButtons = document.querySelectorAll('.favorite-btn');
                    
                    for (const button of favoriteButtons) {
                        const trackId = button.getAttribute('data-track-id');
                        if (trackId) {
                            try {
                                const response = await fetch(`/api/Favorites/check/${trackId}`);
                                const data = await response.json();
                                
                                if (response.ok && data.isFavorite) {
                                    const icon = button.querySelector('i');
                                    icon.className = 'fas fa-heart';
                                    button.title = '–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö';
                                }
                            } catch (error) {
                                console.log('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —É–ª—é–±–ª–µ–Ω–æ–≥–æ:', error);
                            }
                        }
                    }
                } catch (error) {
                    console.log('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', error);
                }
            }

            // –í–∏–¥—ñ–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞
            function selectItem(index) {
                allItems.forEach(item => item.classList.remove('selected'));
                selectedIndex = index;
                
                if (selectedIndex >= 0 && selectedIndex < allItems.length) {
                    allItems[selectedIndex].classList.add('selected');
                    allItems[selectedIndex].scrollIntoView({ block: 'nearest' });
                }
            }

            // –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
            searchInput.addEventListener('input', (e) => {
                const query = e.target.value.trim();
                clearSearch.style.display = query.length > 0 ? 'block' : 'none';
                
                clearTimeout(searchTimeout);
                
                if (query.length === 0) {
                    searchResults.style.display = 'none';
                    return;
                }

                searchTimeout = setTimeout(async () => {
                    try {
                        const results = await fetchResults(query);
                        if (results) displayResults(results);
                    } catch (error) {
                        console.error('Search error:', error);
                        searchResults.innerHTML = '<div class="error-message">–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É</div>';
                        searchResults.style.display = 'block';
                    }
                }, 150);
            });

            // –û—á–∏—â–µ–Ω–Ω—è –ø–æ—à—É–∫—É
            clearSearch.addEventListener('click', () => {
                searchInput.value = '';
                clearSearch.style.display = 'none';
                searchResults.style.display = 'none';
                searchInput.focus();
            });

            // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            searchInput.addEventListener('keydown', (e) => {
                switch(e.key) {
                    case 'ArrowDown':
                        e.preventDefault();
                        selectItem(selectedIndex < allItems.length - 1 ? selectedIndex + 1 : 0);
                        break;
                        
                    case 'ArrowUp':
                        e.preventDefault();
                        selectItem(selectedIndex > 0 ? selectedIndex - 1 : allItems.length - 1);
                        break;
                        
                    case 'Enter':
                        e.preventDefault();
                        if (selectedIndex >= 0 && selectedIndex < allItems.length) {
                            allItems[selectedIndex].click();
                        }
                        break;
                        
                    case 'Escape':
                        if (currentlyPlaying) {
                            currentlyPlaying.classList.remove('playing');
                            currentlyPlaying = null;
                        } else {
                            searchInput.value = '';
                            clearSearch.style.display = 'none';
                            searchResults.style.display = 'none';
                        }
                        break;
                }
            });

            // –ó–∞–∫—Ä–∏—Ç—Ç—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –ø–æ—à—É–∫–æ–º
            document.addEventListener('click', (e) => {
                if (!searchInput.contains(e.target) && 
                    !searchResults.contains(e.target) && 
                    !clearSearch.contains(e.target)) {
                    searchResults.style.display = 'none';
                }
            });

            // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ø–æ—à—É–∫—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
            searchInput.focus();

            // –ü—Ä–æ—Å—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            function showNotificationSimple(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `alert alert-${type === 'error' ? 'danger' : 'success'} position-fixed`;
                notification.style.cssText = `
                    top: 20px;
                    right: 20px;
                    z-index: 9999;
                    min-width: 300px;
                    animation: slideInRight 0.3s ease-out;
                `;
                notification.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
                `;
                document.body.appendChild(notification);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 3000);
            }
    });
</script>
}
