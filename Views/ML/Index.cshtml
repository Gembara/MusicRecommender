@{
    ViewData["Title"] = "ML –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó";
}

@section Styles {
    <link rel="stylesheet" href="~/css/player.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        .ml-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
            padding-bottom: 120px; /* –î–æ–¥–∞—î–º–æ –º—ñ—Å—Ü–µ –¥–ª—è –ø–ª–µ—î—Ä–∞ */
        }

        .ml-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .ml-header h1 {
            color: #1DB954;
            font-size: 2.5rem;
            margin-bottom: 1rem;
        }

        .status-card {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-left: 4px solid #1DB954;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }

        .status-online { background-color: #28a745; }
        .status-offline { background-color: #dc3545; }
        .status-loading { background-color: #ffc107; animation: pulse 1.5s infinite; }

        @@keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .algorithm-selector {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .algorithm-card {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 1rem;
        }

        .algorithm-card:hover {
            border-color: #1DB954;
            transform: translateY(-2px);
        }

        .algorithm-card.selected {
            border-color: #1DB954;
            background-color: #f0f9f0;
        }

        .recommendations-container {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .recommendation-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            border-bottom: 1px solid #e9ecef;
            transition: background-color 0.2s ease;
        }

        .recommendation-item:hover {
            background-color: #f8f9fa;
        }

        .recommendation-item:last-child {
            border-bottom: none;
        }

        .recommendation-info {
            flex: 1;
            margin-left: 1rem;
        }

        .recommendation-title {
            font-weight: 600;
            color: #333;
            margin-bottom: 0.25rem;
        }

        .recommendation-artist {
            color: #666;
            font-size: 0.9rem;
        }

        .confidence-score {
            background: #1DB954;
            color: white;
            padding: 0.25rem 0.5rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .play-button {
            background: #1DB954;
            border: none;
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .play-button:hover {
            background: #1ed760;
            transform: scale(1.1);
        }

        .play-button.playing {
            background: #ff6b6b;
        }

        .music-player {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 1rem;
            margin-top: 1rem;
            border: 1px solid #e9ecef;
            display: none;
        }

        .currently-playing {
            background: #e8f5e8 !important;
            border-left: 4px solid #1DB954;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: 700;
            color: #1DB954;
            display: block;
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }

        .loading-spinner {
            text-align: center;
            padding: 2rem;
        }

        .btn-ml {
            background: linear-gradient(135deg, #1DB954 0%, #1ed760 100%);
            border: none;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 25px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-ml:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(29, 185, 84, 0.3);
            color: white;
        }

        .btn-ml:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .status-section {
            background: #f8f9fa;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border-left: 4px solid #1DB954;
        }

        .spotify-open-btn {
            background: #1DB954 !important;
            border: none !important;
            color: white !important;
            text-decoration: none !important;
            border-radius: 20px !important;
            font-weight: 500 !important;
            transition: all 0.3s ease !important;
        }

        .spotify-open-btn:hover {
            background: #1ed760 !important;
            transform: translateY(-1px) !important;
            color: white !important;
        }

        .spotify-open-btn i {
            font-size: 1.2em;
        }
    </style>
}

<div class="ml-container">
    <div class="ml-header">
        <h1>ü§ñ ML –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h1>
        <p class="lead">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è</p>
    </div>

    <!-- –°—Ç–∞—Ç—É—Å ML —Å–µ—Ä–≤—ñ—Å—É -->
    <div class="status-section">
        <h5>ü§ñ –°—Ç–∞—Ç—É—Å ML —Å–µ—Ä–≤—ñ—Å—É</h5>
        <div class="d-flex align-items-center justify-content-between">
            <div>
                <div id="mlServiceStatus">
                    <span class="status-indicator status-loading"></span>–ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è...
                </div>
                <small class="text-muted">–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ Python ML —Å–µ—Ä–≤—ñ—Å –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8000</small>
            </div>
            <button class="btn btn-outline-primary btn-sm" onclick="checkMLServiceStatus()" id="refreshStatusBtn">
                üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
            </button>
        </div>
        
        <div class="mt-3">
            <button class="btn btn-warning" onclick="trainModels()" id="trainBtn" disabled>
                üéØ –¢—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ
            </button>
            <small class="text-muted ms-2">–°–ø–æ—á–∞—Ç–∫—É –Ω–∞—Ç—Ä–µ–Ω—É–π—Ç–µ –º–æ–¥–µ–ª—ñ –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</small>
        </div>
    </div>

    <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞–Ω–∏—Ö -->
    <div class="stats-grid" id="statsGrid" style="display: none;">
        <div class="stat-card">
            <span class="stat-number" id="usersCount">-</span>
            <div class="stat-label">–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</div>
        </div>
        <div class="stat-card">
            <span class="stat-number" id="interactionsCount">-</span>
            <div class="stat-label">–í–∑–∞—î–º–æ–¥—ñ—ó</div>
        </div>
        <div class="stat-card">
            <span class="stat-number" id="historyCount">-</span>
            <div class="stat-label">–Ü—Å—Ç–æ—Ä—ñ—è</div>
        </div>
        <div class="stat-card">
            <span class="stat-number" id="featuresCount">-</span>
            <div class="stat-label">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–∫—ñ–≤</div>
        </div>
    </div>

    <!-- –í–∏–±—ñ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º—É -->
    <div class="algorithm-selector">
        <h5>üéõÔ∏è –û–±–µ—Ä—ñ—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π</h5>
        <div class="row">
            <div class="col-md-4">
                <div class="algorithm-card" data-algorithm="content_based" onclick="selectAlgorithm('content_based')">
                    <h6>üéµ Content-Based</h6>
                    <p class="mb-0 small">–ù–∞ –æ—Å–Ω–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –º—É–∑–∏–∫–∏</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="algorithm-card" data-algorithm="collaborative" onclick="selectAlgorithm('collaborative')">
                    <h6>üë• Collaborative Filtering</h6>
                    <p class="mb-0 small">–ù–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</p>
                </div>
            </div>
            <div class="col-md-4">
                <div class="algorithm-card selected" data-algorithm="hybrid" onclick="selectAlgorithm('hybrid')">
                    <h6>üîÑ Hybrid</h6>
                    <p class="mb-0 small">–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –æ–±–æ—Ö –º–µ—Ç–æ–¥—ñ–≤</p>
                </div>
            </div>
        </div>
        
        <div class="mt-3">
            <label for="recommendationsCount" class="form-label">–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:</label>
            <select class="form-select" id="recommendationsCount" style="width: auto; display: inline-block;">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="15">15</option>
                <option value="20">20</option>
            </select>
            <button class="btn btn-ml ms-3" onclick="getMLRecommendations()" id="getRecommendationsBtn">
                üöÄ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            </button>
        </div>
    </div>

    <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π -->
    <div class="recommendations-container" id="recommendationsContainer" style="display: none;">
        <h5 id="recommendationsTitle">üéØ –í–∞—à—ñ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</h5>
        <div id="recommendationsList"></div>
    </div>
</div>

<div id="spotifyPlayer"></div>

@section Scripts {
    <script src="~/js/player.js"></script>
    <script>
        let selectedAlgorithm = 'hybrid';

        // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å ML —Å–µ—Ä–≤—ñ—Å—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        document.addEventListener('DOMContentLoaded', function() {
            checkMLServiceStatus();
            loadMLStats();
        });

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É ML —Å–µ—Ä–≤—ñ—Å—É
        async function checkMLServiceStatus() {
            const statusElement = document.getElementById('mlServiceStatus');
            const refreshButton = document.getElementById('refreshStatusBtn');
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            statusElement.innerHTML = '<span class="status-indicator status-loading"></span>–ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è...';
            refreshButton.disabled = true;
            refreshButton.innerHTML = 'üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—î—Ç—å—Å—è...';

            try {
                const response = await fetch('/ML/CheckMLServiceStatus');
                const result = await response.json();

                if (result.success && result.status === 'online') {
                    statusElement.innerHTML = '<span class="status-indicator status-online"></span>ML —Å–µ—Ä–≤—ñ—Å –æ–Ω–ª–∞–π–Ω ‚úÖ';
                    document.getElementById('getRecommendationsBtn').disabled = false;
                    document.getElementById('trainBtn').disabled = false;
                } else {
                    statusElement.innerHTML = '<span class="status-indicator status-offline"></span>ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ‚ùå';
                    document.getElementById('getRecommendationsBtn').disabled = true;
                    document.getElementById('trainBtn').disabled = true;
                }
            } catch (error) {
                statusElement.innerHTML = '<span class="status-indicator status-offline"></span>–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è ‚ùå';
                document.getElementById('getRecommendationsBtn').disabled = true;
                document.getElementById('trainBtn').disabled = true;
            } finally {
                // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                refreshButton.disabled = false;
                refreshButton.innerHTML = 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å';
            }
        }

        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        async function loadMLStats() {
            try {
                const response = await fetch('/ML/GetMLStats');
                const result = await response.json();

                if (result.success) {
                    document.getElementById('usersCount').textContent = result.data.Users;
                    document.getElementById('interactionsCount').textContent = result.data.Interactions;
                    document.getElementById('historyCount').textContent = result.data.History;
                    document.getElementById('featuresCount').textContent = result.data.SongFeatures;
                    document.getElementById('statsGrid').style.display = 'grid';
                }
            } catch (error) {
                console.error('Error loading ML stats:', error);
            }
        }

        // –í–∏–±—ñ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º—É
        function selectAlgorithm(algorithm) {
            // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä
            document.querySelectorAll('.algorithm-card').forEach(card => {
                card.classList.remove('selected');
            });

            // –í–∏–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π
            document.querySelector(`[data-algorithm="${algorithm}"]`).classList.add('selected');
            selectedAlgorithm = algorithm;
        }

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        async function getMLRecommendations() {
            const button = document.getElementById('getRecommendationsBtn');
            const container = document.getElementById('recommendationsContainer');
            const list = document.getElementById('recommendationsList');

            button.disabled = true;
            button.innerHTML = 'üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';

            try {
                const requestData = {
                    Algorithm: selectedAlgorithm,
                    NumberOfRecommendations: parseInt(document.getElementById('recommendationsCount').value)
                };

                const response = await fetch('/ML/GetMLRecommendations', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(requestData)
                });

                const result = await response.json();

                if (result.success && result.data.recommendations) {
                    displayRecommendations(result.data.recommendations, result.data.algorithm_used);
                    container.style.display = 'block';
                } else {
                    showNotification(result.message || '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π', 'error');
                }
            } catch (error) {
                console.error('Error getting ML recommendations:', error);
                showNotification('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ ML —Å–µ—Ä–≤—ñ—Å—É', 'error');
            } finally {
                button.disabled = false;
                button.innerHTML = 'üöÄ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó';
            }
        }

        // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        function displayRecommendations(recommendations, algorithm) {
            const list = document.getElementById('recommendationsList');
            const title = document.getElementById('recommendationsTitle');
            
            title.textContent = `üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (${algorithm || 'Unknown'} –∞–ª–≥–æ—Ä–∏—Ç–º)`;
            
            list.innerHTML = recommendations.map((rec, index) => `
                <div class="recommendation-item" id="rec-${index}">
                    <button class="play-button" onclick="playSong('${rec.track_id}', '${rec.title}', '${rec.artist}', ${index})" id="play-btn-${index}">
                        ‚ñ∂Ô∏è
                    </button>
                    <div class="recommendation-info">
                        <div class="recommendation-title">${rec.title || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç—Ä–µ–∫'}</div>
                        <div class="recommendation-artist">${rec.artist || '–ù–µ–≤—ñ–¥–æ–º–∏–π –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å'}</div>
                    </div>
                    <div class="confidence-score">
                        ${rec.confidence_score ? (rec.confidence_score * 100).toFixed(1) + '%' : 'N/A'}
                    </div>
                </div>
            `).join('');
        }

        let currentlyPlaying = null;

        // –ü—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –ø—ñ—Å–Ω—ñ
        function playSong(trackId, title, artist, index) {
            console.log('Playing song:', trackId, title, artist);
            
            const playButton = document.getElementById(`play-btn-${index}`);
            
            // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç—Ä–µ–∫
            if (currentlyPlaying !== null && currentlyPlaying !== index) {
                document.getElementById(`play-btn-${currentlyPlaying}`).innerHTML = '‚ñ∂Ô∏è';
                document.getElementById(`rec-${currentlyPlaying}`).classList.remove('currently-playing');
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ
            document.getElementById(`rec-${index}`).classList.add('currently-playing');
            playButton.innerHTML = '‚è∏Ô∏è';
            currentlyPlaying = index;
            
            // –î–æ–¥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
            const songData = {
                title: title || 'Unknown Track',
                artist: artist || 'Unknown Artist',
                spotifyTrackId: trackId,
                imageUrl: `https://i.scdn.co/image/ab67616d0000b273${trackId}`,
                listenedAt: new Date().toISOString()
            };

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            fetch('/api/History/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(songData)
            })
            .then(response => {
                if (!response.ok) {
                    console.warn('Failed to save to history');
                } else {
                    console.log('Successfully saved to history');
                }
            })
            .catch(error => {
                console.error('Error saving to history:', error);
            });
            
            // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ Spotify Desktop App –∞–±–æ Web Player
            const spotifyUrl = `https://open.spotify.com/track/${trackId}`;
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–ª–µ—î—Ä —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (typeof spotifyPlayer !== 'undefined') {
                // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ Spotify –ø–ª–µ—î—Ä
                spotifyPlayer.playTrack(
                    trackId, 
                    title || 'Unknown Track', 
                    artist || 'Unknown Artist', 
                    songData.imageUrl
                );
                
                // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Spotify"
                setTimeout(() => {
                    const playerContainer = document.getElementById('spotifyPlayer');
                    if (playerContainer && !playerContainer.querySelector('.spotify-open-btn')) {
                        const openButton = document.createElement('a');
                        openButton.href = spotifyUrl;
                        openButton.target = '_blank';
                        openButton.className = 'spotify-open-btn btn btn-success ms-3';
                        openButton.innerHTML = '<i class="fab fa-spotify"></i> –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤ Spotify';
                        openButton.style.cssText = 'display: inline-flex; align-items: center; gap: 8px; padding: 8px 16px; margin-left: 1rem; white-space: nowrap;';
                        
                        const playerInfo = playerContainer.querySelector('.player-info');
                        if (playerInfo) {
                            playerInfo.appendChild(openButton);
                        }
                    }
                }, 500);
                
            } else {
                // –Ø–∫—â–æ –ø–ª–µ—î—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ Spotify –Ω–∞–ø—Ä—è–º—É
                window.open(spotifyUrl, '_blank');
                showNotification(`–í—ñ–¥–∫—Ä–∏–≤–∞—é "${title}" –≤ Spotify`, 'info');
            }
        }

        // –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
        async function trainModels() {
            const button = document.getElementById('trainBtn');
            
            if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π? –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.')) {
                return;
            }

            button.disabled = true;
            button.innerHTML = 'üîÑ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è...';

            try {
                const response = await fetch('/ML/TrainModels', {
                    method: 'POST'
                });

                const result = await response.json();

                if (result.success) {
                    showNotification('–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', 'success');
                } else {
                    showNotification(result.message || '–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è', 'error');
                }
            } catch (error) {
                console.error('Error training models:', error);
                showNotification('–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π', 'error');
            } finally {
                button.disabled = false;
                button.innerHTML = 'üéØ –¢—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ';
            }
        }

        // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        function showNotification(message, type = 'info') {
            // –ü—Ä–æ—Å—Ç–∏–π alert –¥–ª—è –ø–æ—á–∞—Ç–∫—É, –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
            alert(message);
        }
    </script>
} 