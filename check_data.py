#!/usr/bin/env python3
import sqlite3
import pandas as pd

def check_data():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞–Ω—ñ –≤ –±–∞–∑—ñ –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è:")
    
    try:
        conn = sqlite3.connect('MusicRecommender.db')
        
        # 1. UserSongInteractions
        print("\nüìä UserSongInteractions:")
        interactions = pd.read_sql_query("""
            SELECT UserId, COUNT(*) as count 
            FROM UserSongInteractions 
            GROUP BY UserId 
            ORDER BY count DESC
        """, conn)
        
        if not interactions.empty:
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(interactions)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –≤–∑–∞—î–º–æ–¥—ñ—è–º–∏:")
            for _, row in interactions.iterrows():
                print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {row['UserId']}: {row['count']} –≤–∑–∞—î–º–æ–¥—ñ–π")
        else:
            print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ UserSongInteractions")
        
        # 2. History
        print("\nüìö History:")
        history = pd.read_sql_query("""
            SELECT UserId, COUNT(*) as count 
            FROM History 
            GROUP BY UserId 
            ORDER BY count DESC
        """, conn)
        
        if not history.empty:
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(history)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ History:")
            for _, row in history.iterrows():
                print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {row['UserId']}: {row['count']} –∑–∞–ø–∏—Å—ñ–≤")
        
        # 3. Favorites
        print("\n‚ù§Ô∏è Favorites:")
        try:
            favorites = pd.read_sql_query("""
                SELECT UserId, COUNT(*) as count 
                FROM Favorites 
                GROUP BY UserId 
                ORDER BY count DESC
            """, conn)
            
            if not favorites.empty:
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(favorites)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ Favorites:")
                for _, row in favorites.iterrows():
                    print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {row['UserId']}: {row['count']} —É–ª—é–±–ª–µ–Ω–∏—Ö")
            else:
                print("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ Favorites")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è Favorites: {e}")
        
        # 4. –ß–∏ —î —Å–ø—ñ–ª—å–Ω—ñ —Ç—Ä–µ–∫–∏ –º—ñ–∂ History/Favorites —Ç–∞ SongFeatures?
        print("\nüîó –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—ñ–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤:")
        
        # –¢—Ä–µ–∫–∏ –∑ History —è–∫—ñ —î –≤ SongFeatures
        common_history = pd.read_sql_query("""
            SELECT h.SpotifyTrackId, h.Title, h.Artist, COUNT(*) as usage_count
            FROM History h
            INNER JOIN SongFeatures sf ON h.SpotifyTrackId = sf.SpotifyTrackId
            GROUP BY h.SpotifyTrackId, h.Title, h.Artist
            ORDER BY usage_count DESC
        """, conn)
        
        if not common_history.empty:
            print(f"–°–ø—ñ–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤ –º—ñ–∂ History —ñ SongFeatures: {len(common_history)}")
            for _, row in common_history.head(5).iterrows():
                print(f"   {row['Title']} - {row['Artist']} (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è {row['usage_count']} —Ä–∞–∑—ñ–≤)")
        else:
            print("‚ùå –ù–µ–º–∞—î —Å–ø—ñ–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤ –º—ñ–∂ History —ñ SongFeatures")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    check_data() 