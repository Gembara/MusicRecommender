import sqlite3
import random
from datetime import datetime, timedelta

def add_sasha():
    print("üéµ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –°–∞—à–∞...")
    
    try:
        conn = sqlite3.connect('../MusicRecommender.db')
        cursor = conn.cursor()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        cursor.execute("SELECT UserId, UserName FROM Users")
        users = cursor.fetchall()
        print(f"–Ü—Å–Ω—É—é—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ ({len(users)}):", users)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –°–∞—à–∞
        cursor.execute("SELECT UserId FROM Users WHERE UserName = '–°–∞—à–∞'")
        sasha = cursor.fetchone()
        
        if sasha:
            user_id = sasha[0]
            print(f"–°–∞—à–∞ –≤–∂–µ —ñ—Å–Ω—É—î –∑ ID: {user_id}")
        else:
            # –î–æ–¥–∞—î–º–æ –°–∞—à—É
            cursor.execute("""
                INSERT INTO Users (UserName, Email, PreferredGenres, 
                                 AvgTempo, AvgEnergy, AvgDanceability, AvgValence,
                                 AvgAcousticness, AvgInstrumentalness, AvgLoudness, AvgSpeechiness,
                                 CreatedAt)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                '–°–∞—à–∞', 'sasha@music.com', 'Rock,Alternative,Indie',
                125.0, 0.75, 0.65, 0.55, 0.15, 0.05, -8.0, 0.10,
                datetime.now().isoformat()
            ))
            user_id = cursor.lastrowid
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –°–∞—à—É –∑ ID: {user_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—Ä–µ–∫–∏
        cursor.execute("SELECT SpotifyTrackId, Title, Artist FROM SongFeatures LIMIT 10")
        available_tracks = cursor.fetchall()
        print(f"–î–æ—Å—Ç—É–ø–Ω—ñ —Ç—Ä–µ–∫–∏ ({len(available_tracks)}):")
        for track in available_tracks:
            print(f"  - {track[0]}: {track[1]} - {track[2]}")
        
        # –î–æ–¥–∞—î–º–æ –≤–∑–∞—î–º–æ–¥—ñ—ó (–°–∞—à–∞ –ª—é–±–∏—Ç—å –µ–Ω–µ—Ä–≥—ñ–π–Ω—É –º—É–∑–∏–∫—É)
        tracks = [
            ('6DCZcSspjsKoFjzjrWoCdn', 4.8),  # God's Plan
            ('7KXjTSCq5nL1LoYtL7XAwS', 5.0),  # HUMBLE.
            ('2xLMifQCjDGFmkHkpNLD9h', 4.9),  # Sicko Mode
            ('7wGoVu4Dady5GV0Sv4UIsx', 4.7),  # Rockstar
            ('0sf0KYcqVmpUCOG2DIMHtH', 4.5),  # Blinding Lights
        ]
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –°–∞—à—ñ
        cursor.execute("DELETE FROM UserSongInteractions WHERE UserId = ?", (user_id,))
        deleted = cursor.rowcount
        print(f"–í–∏–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä–∏—Ö –≤–∑–∞—î–º–æ–¥—ñ–π")
        
        added_interactions = 0
        for track_id, rating in tracks:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç—Ä–µ–∫
            cursor.execute("SELECT SpotifyTrackId FROM SongFeatures WHERE SpotifyTrackId = ?", (track_id,))
            if cursor.fetchone():
                cursor.execute("""
                    INSERT INTO UserSongInteractions 
                    (UserId, SpotifyTrackId, InteractionType, Rating, PlayDuration, 
                     IsLiked, IsSkipped, IsRepeat, InteractionTime)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    user_id, track_id, 'listen', rating, 
                    random.randint(120, 240),
                    1 if rating >= 4.0 else 0,
                    0, 1 if rating >= 4.5 else 0,
                    datetime.now().isoformat()
                ))
                added_interactions += 1
                print(f"  ‚úÖ –î–æ–¥–∞–Ω–æ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ —Ç—Ä–µ–∫–æ–º {track_id} (—Ä–µ–π—Ç–∏–Ω–≥: {rating})")
            else:
                print(f"  ‚ùå –¢—Ä–µ–∫ {track_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ")
        
        # –¢–∞–∫–æ–∂ –¥–æ–¥–∞—î–º–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é - —Å–ø–æ—á–∞—Ç–∫—É –¥–∏–≤–∏–º–æ—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
        cursor.execute("PRAGMA table_info(History)")
        history_columns = cursor.fetchall()
        print("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ History:")
        for col in history_columns:
            print(f"  {col[1]} ({col[2]}) - NOT NULL: {col[3]}")
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Å—Ç—ñ—à–∏–π –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
        cursor.execute("DELETE FROM History WHERE UserId = ?", (user_id,))
        added_history = 0
        
        # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è, —è–∫—ñ —Ç–æ—á–Ω–æ —ñ—Å–Ω—É—é—Ç—å
        for track_id, rating in tracks[:2]:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–æ–ø 2 –≤ —ñ—Å—Ç–æ—Ä—ñ—é
            cursor.execute("""
                SELECT Title, Artist FROM SongFeatures WHERE SpotifyTrackId = ?
            """, (track_id,))
            track_info = cursor.fetchone()
            
            if track_info:
                try:
                    cursor.execute("""
                        INSERT INTO History (UserId, Title, Artist, SpotifyTrackId, ImageUrl, ListenedAt)
                        VALUES (?, ?, ?, ?, ?, ?)
                    """, (
                        user_id,
                        track_info[0] or 'Unknown Track',  # Title
                        track_info[1] or 'Unknown Artist',  # Artist
                        track_id,
                        f"https://i.scdn.co/image/ab67616d0000b273default",
                        datetime.now().isoformat()
                    ))
                    added_history += 1
                    print(f"  ‚úÖ –î–æ–¥–∞–Ω–æ –≤ —ñ—Å—Ç–æ—Ä—ñ—é: {track_info[0]} - {track_info[1]}")
                except Exception as hist_err:
                    print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é: {hist_err}")
        
        conn.commit()
        conn.close()
        
        print(f"\nüéâ –°–∞—à–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!")
        print(f"   üë§ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")
        print(f"   üéµ –ú—É–∑–∏—á–Ω—ñ –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó: Rock, Alternative, Indie")
        print(f"   üìä –î–æ–¥–∞–Ω–æ {added_interactions} –≤–∑–∞—î–º–æ–¥—ñ–π")
        print(f"   üìú –î–æ–¥–∞–Ω–æ {added_history} –∑–∞–ø–∏—Å—ñ–≤ –≤ —ñ—Å—Ç–æ—Ä—ñ—é")
        print(f"   üéØ –•–∞—Ä–∞–∫—Ç–µ—Ä: –õ—é–±–∏—Ç—å –µ–Ω–µ—Ä–≥—ñ–π–Ω—É –º—É–∑–∏–∫—É —Ç–∞ —Ä–æ–∫")
        print(f"   ‚≠ê –¢–æ–ø —Ç—Ä–µ–∫–∏: HUMBLE. (5.0‚òÖ), Sicko Mode (4.9‚òÖ), God's Plan (4.8‚òÖ)")
        
        # –¢–µ–ø–µ—Ä –ø—Ä–æ—Ç–µ—Å—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        print(f"\nü§ñ –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –°–∞—à—ñ...")
        test_ml_for_sasha(user_id)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def test_ml_for_sasha(user_id):
    """–¢–µ—Å—Ç—É—î–º–æ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –°–∞—à—ñ"""
    try:
        import requests
        
        # –°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—ñ
        print("  üéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...")
        train_response = requests.post('http://localhost:8000/train')
        if train_response.status_code == 200:
            print("  ‚úÖ –ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ")
        else:
            print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {train_response.status_code}")
            return
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        algorithms = ['content_based', 'collaborative', 'hybrid']
        
        for algorithm in algorithms:
            print(f"\n  üîÑ –¢–µ—Å—Ç—É—î–º–æ {algorithm} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó...")
            req_data = {
                'user_id': user_id,
                'algorithm': algorithm,
                'num_recommendations': 5
            }
            
            rec_response = requests.post('http://localhost:8000/recommend', json=req_data)
            if rec_response.status_code == 200:
                recommendations = rec_response.json()
                if recommendations and 'recommendations' in recommendations:
                    recs = recommendations['recommendations']
                    print(f"  ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ {len(recs)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:")
                    for i, rec in enumerate(recs[:3], 1):
                        title = rec.get('title', 'Unknown')
                        artist = rec.get('artist', 'Unknown')
                        confidence = rec.get('confidence_score', 0)
                        print(f"    {i}. {title} - {artist} ({confidence:.1%})")
                else:
                    print(f"  ‚ùå –ü–æ—Ä–æ–∂–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
            else:
                print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {rec_response.status_code}")
                
    except requests.exceptions.ConnectionError:
        print("  ‚ùå ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É ML —Å–µ—Ä–≤—ñ—Å –∫–æ–º–∞–Ω–¥–æ—é 'py start_service.py'")
    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML: {e}")

if __name__ == "__main__":
    add_sasha() 