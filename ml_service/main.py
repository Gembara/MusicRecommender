from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Optional, Any
import logging
import asyncio
import time
from datetime import datetime
from ml_models import MusicRecommenderML
from enhanced_data_loader import EnhancedDataLoader
import pandas as pd

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI
app = FastAPI(
    title="üéµ Music Recommender ML Service Enhanced",
    description="""
    ## ü§ñ –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –º—É–∑–∏—á–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    
    ### üéØ –ê–ª–≥–æ—Ä–∏—Ç–º–∏:
    - **Content-Based**: Random Forest –Ω–∞ –∞—É–¥—ñ–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö + –∫–æ–Ω—Ç–µ–∫—Å—Ç
    - **Collaborative**: KNN –Ω–∞ –º–∞—Ç—Ä–∏—Ü—ñ user-item –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
    - **Hybrid**: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –æ–±–æ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤
    
    ### üìä –ù–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–∏—Ö:
    
    - **MLTrainingData**: –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    - **MLUserProfiles**: –ü—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–æ–≤–∏–º–∏ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏
    - **Enhanced Features**: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è, —á–∞—Å–æ–≤—ñ –ø–∞—Ç–µ—Ä–Ω–∏
    
    ### üîß –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–±—ñ—Ä —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –º–æ–¥–µ–ª–µ–π –≤ –ë–î
    - –ö–µ—à—É–≤–∞–Ω–Ω—è —Å—Ö–æ–∂–æ—Å—Ç–µ–π –¥–ª—è —à–≤–∏–¥—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    
    –í–µ—Ä—Å—ñ—è 3.0 –¥–ª—è Music Recommender App üéµ
    """,
    version="3.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ML —Ä–µ–∫–æ–º–µ–Ω–¥–µ—Ä–∞ —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—á–∞
ml_recommender = MusicRecommenderML()
enhanced_loader = EnhancedDataLoader()

# Pydantic –º–æ–¥–µ–ª—ñ
class TrainModelsRequest(BaseModel):
    model_types: Optional[List[str]] = ["content", "collaborative", "hybrid"]
    min_interactions_per_user: int = 5
    include_skips: bool = False
    time_window_days: Optional[int] = None

class RecommendationRequest(BaseModel):
    user_id: int
    model_type: str = "hybrid"
    limit: int = 20

class SingleRecommendation(BaseModel):
    track_id: str
    artist: str = "Unknown"
    predicted_rating: float
    reason: str
    features: Optional[Dict[str, Any]] = {}

class RecommendationResponse(BaseModel):
    success: bool
    message: str
    recommendations: List[SingleRecommendation]
    processing_time: Optional[float] = None
    algorithm_used: Optional[str] = None

class TrainingResponse(BaseModel):
    success: bool
    message: str
    metrics: Optional[Dict[str, Any]] = None
    training_time: Optional[float] = None
    model_version: Optional[str] = None

class HealthResponse(BaseModel):
    status: str
    version: str
    models_trained: bool
    message: str
    database_stats: Optional[Dict[str, Any]] = None

class StatusResponse(BaseModel):
    service_status: str
    version: str
    models_trained: bool
    database_connected: bool
    last_training: Optional[str] = None
    training_data_count: Optional[int] = None

@app.get("/", response_model=HealthResponse)
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ API –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    try:
        with enhanced_loader:
            stats = enhanced_loader.get_training_data_stats()
        
        return HealthResponse(
            status="healthy",
            version="3.0.0",
            models_trained=ml_recommender.is_trained,
            message="üéµ Enhanced Music Recommender ML Service –ø—Ä–∞—Ü—é—î!",
            database_stats=stats
        )
    except Exception as e:
        return HealthResponse(
            status="healthy",
            version="3.0.0", 
            models_trained=ml_recommender.is_trained,
            message="üéµ ML Service –ø—Ä–∞—Ü—é—î (–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)",
            database_stats=None
        )

@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        with enhanced_loader:
            stats = enhanced_loader.get_training_data_stats()
        
        return HealthResponse(
            status="healthy",
            version="3.0.0",
            models_trained=ml_recommender.is_trained,
            message="‚úÖ –°–µ—Ä–≤—ñ—Å —Ç–∞ –ë–î –ø—Ä–∞—Ü—é—é—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
            database_stats=stats
        )
    except Exception as e:
        logger.warning(f"Database connection issue: {e}")
        return HealthResponse(
            status="degraded",
            version="3.0.0",
            models_trained=ml_recommender.is_trained,
            message="‚ö†Ô∏è –°–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î, –∞–ª–µ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        )

@app.get("/status", response_model=StatusResponse)
async def get_status():
    """–î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ .NET"""
    try:
        with enhanced_loader:
            stats = enhanced_loader.get_training_data_stats()
            latest_metrics = enhanced_loader.get_latest_model_metrics("Hybrid")
        
        return StatusResponse(
            service_status="online",
            version="3.0.0",
            models_trained=ml_recommender.is_trained,
            database_connected=True,
            last_training=latest_metrics.get("TrainingDate") if latest_metrics else None,
            training_data_count=stats.get("total_interactions", 0)
        )
    except Exception as e:
        logger.error(f"Status check error: {e}")
        return StatusResponse(
            service_status="online",
            version="3.0.0",
            models_trained=ml_recommender.is_trained,
            database_connected=False,
            last_training=None,
            training_data_count=0
        )

@app.post("/train", response_model=TrainingResponse)
async def train_models(request: TrainModelsRequest = TrainModelsRequest()):
    """
    –ü–æ–∫—Ä–∞—â–µ–Ω–µ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π –∑ –Ω–æ–≤–æ—é —Å–∏—Å—Ç–µ–º–æ—é –¥–∞–Ω–∏—Ö
    
    üéØ –©–æ —Ç—Ä–µ–Ω—É—î—Ç—å—Å—è:
    - Content-Based: Random Forest –Ω–∞ –∞—É–¥—ñ–æ —Ñ—ñ—á–∞—Ö + –∫–æ–Ω—Ç–µ–∫—Å—Ç + –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ —Ñ—ñ—á—ñ
    - Collaborative: KNN –Ω–∞ –ø–æ–∫—Ä–∞—â–µ–Ω—ñ–π –º–∞—Ç—Ä–∏—Ü—ñ user-item –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
    - SVD: TruncatedSVD –¥–ª—è –º–∞—Ç—Ä–∏—á–Ω–æ—ó —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    - Hybrid: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –¥–∞–Ω—ñ –∑ History, Favorites, UserSongInteractions
    """
    start_time = time.time()
    
    try:
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π data_loader –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        training_data, song_features = ml_recommender.data_loader.prepare_training_data()
        
        if training_data.empty:
            logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–∫-–¥–∞–Ω—ñ...")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
            training_data = pd.DataFrame({
                'UserId': [1, 1, 2, 2, 3, 3] * 5,
                'SpotifyTrackId': ['track1', 'track2', 'track3', 'track4', 'track5', 'track6'] * 5,
                'Rating': [5, 4, 3, 5, 2, 4] * 5,
                'Danceability': [0.8, 0.6, 0.4, 0.9, 0.3, 0.7] * 5,
                'Energy': [0.7, 0.5, 0.6, 0.8, 0.4, 0.6] * 5,
                'Valence': [0.9, 0.6, 0.5, 0.8, 0.3, 0.7] * 5,
                'Tempo_norm': [0.7, 0.5, 0.4, 0.8, 0.3, 0.6] * 5,
                'Acousticness': [0.2, 0.4, 0.6, 0.1, 0.8, 0.3] * 5,
                'Instrumentalness': [0.1, 0.0, 0.2, 0.0, 0.5, 0.1] * 5,
                'Speechiness': [0.1, 0.2, 0.1, 0.1, 0.3, 0.2] * 5,
                'Loudness_norm': [0.6, 0.5, 0.4, 0.7, 0.3, 0.5] * 5,
                'Popularity': [80, 60, 40, 90, 30, 70] * 5
            })
            logger.info(f"üìä –°—Ç–≤–æ—Ä–µ–Ω–æ {len(training_data)} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
        
        # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å
        metrics = ml_recommender.train_models()
        
        training_time = time.time() - start_time
        
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)
        try:
            model_version = f"v{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            with enhanced_loader:
                enhanced_loader.save_model_metrics("Hybrid", model_version, metrics)
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏: {e}")
        
        logger.info(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {training_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        return TrainingResponse(
            success=True,
            message=f"üéØ –í—Å—ñ ML –º–æ–¥–µ–ª—ñ —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ! Content + Collaborative + SVD + Hybrid –≥–æ—Ç–æ–≤—ñ",
            metrics=metrics,
            training_time=training_time,
            model_version=f"v{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
        training_time = time.time() - start_time
        
        return TrainingResponse(
            success=False,
            message=f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {str(e)}",
            training_time=training_time
        )

@app.post("/recommend")
async def get_recommendations(request: RecommendationRequest):
    """
    üîÄ –ì—ñ–±—Ä–∏–¥–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó (Content + Collaborative + SVD)
    
    –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –≤—Å—ñ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤:
    - 40% Content-Based (–∞—É–¥—ñ–æ —Å—Ö–æ–∂—ñ—Å—Ç—å)
    - 30% Collaborative KNN (—Å—Ö–æ–∂—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ)  
    - 30% SVD (–ª–∞—Ç–µ–Ω—Ç–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏)
    """
    start_time = time.time()
    
    try:
        if not ml_recommender.is_trained:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ, —Ç—Ä–µ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ...")
            train_result = await train_models()
            if not train_result.success:
                return RecommendationResponse(
                    success=False,
                    message="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ",
                    recommendations=[],
                    processing_time=time.time() - start_time
                )
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—ñ–±—Ä–∏–¥–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        raw_recommendations = ml_recommender.get_hybrid_recommendations(
            user_id=request.user_id,
            limit=request.limit
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        recommendations = []
        for rec in raw_recommendations:
            recommendations.append(SingleRecommendation(
                track_id=rec['track_id'],
                artist=rec.get('artist', rec.get('Artist', 'Unknown Artist')),  # –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–ª—é—á—ñ
                predicted_rating=rec['predicted_rating'],
                reason=rec.get('reason', 'Hybrid recommendation'),
                features={
                    'title': rec.get('title', rec.get('Title', 'Unknown Track')),
                    'artist': rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                    'genre': rec.get('genre', rec.get('Genre', 'Unknown Genre')),
                    'algorithm': rec.get('algorithm', 'Hybrid'),
                    'confidence': rec.get('confidence', 0.5),
                    'methods_used': rec.get('methods_used', [])
                }
            ))
        
        processing_time = time.time() - start_time
        
        return RecommendationResponse(
            success=True,
            message=f"‚úÖ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(recommendations)} –≥—ñ–±—Ä–∏–¥–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
            recommendations=recommendations,
            processing_time=processing_time,
            algorithm_used="Hybrid (Content + KNN + SVD)"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
        processing_time = time.time() - start_time
        
        return RecommendationResponse(
            success=False,
            message=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            recommendations=[],
            processing_time=processing_time
        )

@app.post("/recommend/content")
async def get_content_recommendations(request: RecommendationRequest):
    """
    üéØ Content-Based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞—É–¥—ñ–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç—Ä–µ–∫—ñ–≤:
    - Danceability, Energy, Valence, Tempo
    - Acousticness, Instrumentalness, Speechiness
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Random Forest –¥–ª—è –ø—Ä–µ–¥–∏–∫—Ü—ñ—ó —Ä–µ–π—Ç–∏–Ω–≥—É
    """
    start_time = time.time()
    
    try:
        if not ml_recommender.is_trained:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ")
            return RecommendationResponse(
                success=False,
                message="‚ùå –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ. –í–∏–∫–æ–Ω–∞–π—Ç–µ /train —Å–ø–æ—á–∞—Ç–∫—É",
                recommendations=[],
                processing_time=time.time() - start_time
            )
        
        raw_recommendations = ml_recommender.get_content_recommendations(
            user_id=request.user_id,
            limit=request.limit
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        recommendations = []
        for rec in raw_recommendations:
            recommendations.append(SingleRecommendation(
                track_id=rec['track_id'],
                artist=rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                predicted_rating=rec['predicted_rating'],
                reason=rec.get('reason', 'Content-based recommendation'),
                features={
                    'title': rec.get('title', rec.get('Title', 'Unknown Track')),
                    'artist': rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                    'genre': rec.get('genre', rec.get('Genre', 'Unknown Genre')),
                    'algorithm': rec.get('algorithm', 'Content'),
                    'confidence': rec.get('confidence', 0.5)
                }
            ))
        
        processing_time = time.time() - start_time
        
        return RecommendationResponse(
            success=True,
            message=f"‚úÖ {len(recommendations)} content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
            recommendations=recommendations,
            processing_time=processing_time,
            algorithm_used="Content-Based (Random Forest)"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ content —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
        return RecommendationResponse(
            success=False,
            message=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            recommendations=[],
            processing_time=time.time() - start_time
        )

@app.post("/recommend/collaborative") 
async def get_collaborative_recommendations(request: RecommendationRequest):
    """
    üë• KNN Collaborative Filtering —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ö–æ–∂–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
    - –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Å—Ö–æ–∂–∏–º–∏ —Å–º–∞–∫–∞–º–∏
    - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î KNN (k-nearest neighbors)
    - –†–µ–∫–æ–º–µ–Ω–¥—É—î —Ç—Ä–µ–∫–∏ —â–æ –ø–æ–¥–æ–±–∞–ª–∏—Å—å —Å—Ö–æ–∂–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    """
    start_time = time.time()
    
    try:
        if not ml_recommender.is_trained:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ")
            return RecommendationResponse(
                success=False,
                message="‚ùå –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ. –í–∏–∫–æ–Ω–∞–π—Ç–µ /train —Å–ø–æ—á–∞—Ç–∫—É",
                recommendations=[],
                processing_time=time.time() - start_time
            )
        
        raw_recommendations = ml_recommender.get_collaborative_recommendations(
            user_id=request.user_id,
            limit=request.limit
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        recommendations = []
        for rec in raw_recommendations:
            recommendations.append(SingleRecommendation(
                track_id=rec['track_id'],
                artist=rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                predicted_rating=rec['predicted_rating'],
                reason=rec.get('reason', 'Collaborative recommendation'),
                features={
                    'title': rec.get('title', rec.get('Title', 'Unknown Track')),
                    'artist': rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                    'genre': rec.get('genre', rec.get('Genre', 'Unknown Genre')),
                    'algorithm': rec.get('algorithm', 'Collaborative'),
                    'confidence': rec.get('confidence', 0.5)
                }
            ))
        
        processing_time = time.time() - start_time
        
        return RecommendationResponse(
            success=True,
            message=f"‚úÖ {len(recommendations)} collaborative —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
            recommendations=recommendations,
            processing_time=processing_time,
            algorithm_used="Collaborative KNN"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ collaborative —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
        return RecommendationResponse(
            success=False,
            message=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            recommendations=[],
            processing_time=time.time() - start_time
        )

@app.post("/recommend/svd")
async def get_svd_recommendations(request: RecommendationRequest):
    """
    üîÑ SVD Matrix Factorization —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ –º–∞—Ç—Ä–∏—á–Ω—É —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é:
    - TruncatedSVD –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É user-item –º–∞—Ç—Ä–∏—Ü—ñ
    - –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ª–∞—Ç–µ–Ω—Ç–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ –≤ –¥–∞–Ω–∏—Ö
    - –†–µ–∫–æ–º–µ–Ω–¥—É—î –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ö–æ–∂–æ—Å—Ç—ñ –≤ –ª–∞—Ç–µ–Ω—Ç–Ω–æ–º—É –ø—Ä–æ—Å—Ç–æ—Ä—ñ
    """
    start_time = time.time()
    
    try:
        if not ml_recommender.is_trained:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ")
            return RecommendationResponse(
                success=False,
                message="‚ùå –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ. –í–∏–∫–æ–Ω–∞–π—Ç–µ /train —Å–ø–æ—á–∞—Ç–∫—É",
                recommendations=[],
                processing_time=time.time() - start_time
            )
        
        raw_recommendations = ml_recommender.get_svd_recommendations(
            user_id=request.user_id,
            limit=request.limit
        )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
        recommendations = []
        for rec in raw_recommendations:
            recommendations.append(SingleRecommendation(
                track_id=rec['track_id'],
                artist=rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                predicted_rating=rec['predicted_rating'],
                reason=rec.get('reason', 'SVD recommendation'),
                features={
                    'title': rec.get('title', rec.get('Title', 'Unknown Track')),
                    'artist': rec.get('artist', rec.get('Artist', 'Unknown Artist')),
                    'genre': rec.get('genre', rec.get('Genre', 'Unknown Genre')),
                    'algorithm': rec.get('algorithm', 'SVD'),
                    'confidence': rec.get('confidence', 0.5),
                    'latent_similarity': rec.get('latent_similarity', 0.0)
                }
            ))
        
        processing_time = time.time() - start_time
        
        return RecommendationResponse(
            success=True,
            message=f"‚úÖ {len(recommendations)} SVD —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π",
            recommendations=recommendations,
            processing_time=processing_time,
            algorithm_used="SVD Matrix Factorization"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SVD —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
        return RecommendationResponse(
            success=False,
            message=f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            recommendations=[],
            processing_time=time.time() - start_time
        )

@app.get("/models/info")
async def get_models_info():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ –º–æ–¥–µ–ª—ñ"""
    try:
        with enhanced_loader:
            content_metrics = enhanced_loader.get_latest_model_metrics("Content")
            collaborative_metrics = enhanced_loader.get_latest_model_metrics("Collaborative") 
            hybrid_metrics = enhanced_loader.get_latest_model_metrics("Hybrid")
            
            return {
                "models_trained": ml_recommender.is_trained,
                "content_based": {
                    "available": content_metrics is not None,
                    "last_training": content_metrics.get("TrainingDate") if content_metrics else None,
                    "mae": content_metrics.get("MAE") if content_metrics else None
                },
                "collaborative": {
                    "available": collaborative_metrics is not None,
                    "last_training": collaborative_metrics.get("TrainingDate") if collaborative_metrics else None,
                    "sparsity": collaborative_metrics.get("collaborative_sparsity") if collaborative_metrics else None
                },
                "hybrid": {
                    "available": hybrid_metrics is not None,
                    "last_training": hybrid_metrics.get("TrainingDate") if hybrid_metrics else None,
                    "total_samples": hybrid_metrics.get("TrainingSamples") if hybrid_metrics else None
                }
            }
    except Exception as e:
        logger.error(f"Error getting models info: {e}")
        return {
            "models_trained": ml_recommender.is_trained,
            "error": str(e)
        }

@app.get("/data/stats")
async def get_data_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    try:
        with enhanced_loader:
            stats = enhanced_loader.get_training_data_stats()
            return {
                "success": True,
                "stats": stats
            }
    except Exception as e:
        logger.error(f"Error getting data stats: {e}")
        return {
            "success": False,
            "error": str(e)
        }

if __name__ == "__main__":
    import uvicorn
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Enhanced Music Recommender ML Service...")
    uvicorn.run(app, host="0.0.0.0", port=8000) 