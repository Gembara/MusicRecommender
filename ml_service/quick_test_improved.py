#!/usr/bin/env python3
"""
–®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö SVD —Ç–∞ KNN –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
"""

from ml_models import MusicRecommenderML
from data_loader import DataLoader
import numpy as np

def quick_test():
    print("üî• –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç –ø–æ–∫—Ä–∞—â–µ–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤")
    print("=" * 50)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    ml_model = MusicRecommenderML()
    
    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    print("üéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
    try:
        metrics = ml_model.train_models()
        print(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
        if "error" not in metrics:
            print(f"üìä –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {metrics.get('unique_users', 0)}")
            print(f"üéµ –¢—Ä–µ–∫—ñ–≤: {metrics.get('unique_tracks', 0)}")
            print(f"üîß SVD –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤: {metrics.get('svd_components', 0)}")
            print(f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {metrics.get('collaborative_active_users', 0)}")
            print(f"‚öñÔ∏è SVD bias correction: {metrics.get('svd_bias_correction', False)}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {metrics['error']}")
            return
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\nüéµ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
    test_user_id = 1
    
    try:
        # SVD —Ç–µ—Å—Ç
        print("\nüîÑ SVD —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        svd_recs = ml_model.get_svd_recommendations(test_user_id, limit=3)
        if svd_recs:
            for i, rec in enumerate(svd_recs, 1):
                print(f"  {i}. {rec.get('Artist', 'Unknown')} - {rec.get('Title', 'Unknown')}")
                print(f"     üìä –†–µ–π—Ç–∏–Ω–≥: {rec['predicted_rating']:.2f}")
                print(f"     üîß Algorithm: {rec.get('algorithm', 'Unknown')}")
        else:
            print("  ‚ö†Ô∏è –ù–µ–º–∞—î SVD —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
        
        # KNN —Ç–µ—Å—Ç
        print("\nüë• KNN —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        knn_recs = ml_model.get_collaborative_recommendations(test_user_id, limit=3)
        if knn_recs:
            for i, rec in enumerate(knn_recs, 1):
                print(f"  {i}. {rec.get('Artist', 'Unknown')} - {rec.get('Title', 'Unknown')}")
                print(f"     üìä –†–µ–π—Ç–∏–Ω–≥: {rec['predicted_rating']:.2f}")
                print(f"     üë• –°—É—Å—ñ–¥—ñ–≤: {rec.get('neighbor_count', 0)}")
                print(f"     üîß Algorithm: {rec.get('algorithm', 'Unknown')}")
        else:
            print("  ‚ö†Ô∏è –ù–µ–º–∞—î KNN —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–æ—ó –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ:")
    
    try:
        # SVD —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
        if hasattr(ml_model, 'svd_user_factors') and ml_model.svd_user_factors is not None:
            print(f"‚úÖ SVD —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: {ml_model.svd_user_factors.shape}")
            print(f"‚úÖ Item —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è: {ml_model.svd_item_factors.shape}")
        
        # Bias terms
        if hasattr(ml_model, 'global_mean') and ml_model.global_mean is not None:
            print(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π: {ml_model.global_mean:.3f}")
            
        # User mappings
        if hasattr(ml_model, 'user_id_to_idx'):
            print(f"‚úÖ User mappings: {len(ml_model.user_id_to_idx)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
        print("‚úÖ –í—Å—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    quick_test() 