#!/usr/bin/env python3
import requests
import sqlite3
from typing import Dict, List

def get_user_profile(user_id: int) -> Dict:
    """–û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect('../MusicRecommender.db')
    cursor = conn.cursor()
    
    # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    cursor.execute("SELECT UserName, PreferredGenres FROM Users WHERE UserId = ?", (user_id,))
    user_info = cursor.fetchone()
    
    if not user_info:
        return {}
    
    # –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
    cursor.execute("""
        SELECT SpotifyTrackId, Rating, InteractionType 
        FROM UserSongInteractions 
        WHERE UserId = ? 
        ORDER BY Rating DESC
    """, (user_id,))
    interactions = cursor.fetchall()
    
    # –¢—Ä–µ–∫–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
    cursor.execute("""
        SELECT DISTINCT s.Title, s.Artist 
        FROM UserSongInteractions ui
        JOIN SongFeatures s ON ui.SpotifyTrackId = s.SpotifyTrackId
        WHERE ui.UserId = ?
        ORDER BY ui.Rating DESC
        LIMIT 5
    """, (user_id,))
    top_tracks = cursor.fetchall()
    
    conn.close()
    
    return {
        'user_id': user_id,
        'name': user_info[0],
        'genres': user_info[1],
        'interactions_count': len(interactions),
        'top_tracks': top_tracks
    }

def get_recommendations(user_id: int, algorithm: str = 'hybrid', num_recs: int = 5) -> List[Dict]:
    """–û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        response = requests.post('http://localhost:8000/recommend', json={
            'user_id': user_id,
            'algorithm': algorithm,
            'num_recommendations': num_recs
        })
        
        if response.status_code == 200:
            data = response.json()
            return data.get('recommendations', [])
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {response.status_code}")
            return []
            
    except requests.exceptions.ConnectionError:
        print("‚ùå ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å 'py start_service.py'")
        return []

def test_personal_recommendations():
    """–¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    print("üéµ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π\n")
    
    # –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_users = [1, 13, 2, 3]  # Vens, –°–∞—à–∞, TestUser1, TestUser2
    
    # –°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—ñ
    print("üéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...")
    try:
        train_response = requests.post('http://localhost:8000/train')
        if train_response.status_code == 200:
            print("‚úÖ –ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ\n")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {train_response.status_code}")
            return
    except requests.exceptions.ConnectionError:
        print("‚ùå ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return
    
    # –¢–µ—Å—Ç—É—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    for user_id in test_users:
        print(f"{'='*60}")
        print(f"üë§ –ö–û–†–ò–°–¢–£–í–ê–ß {user_id}")
        print(f"{'='*60}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å
        profile = get_user_profile(user_id)
        if not profile:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π\n")
            continue
        
        print(f"üìã –Ü–º'—è: {profile['name']}")
        print(f"üé≠ –ñ–∞–Ω—Ä–∏: {profile['genres']}")
        print(f"üìä –í–∑–∞—î–º–æ–¥—ñ–π: {profile['interactions_count']}")
        print(f"‚≠ê –¢–æ–ø —Ç—Ä–µ–∫–∏:")
        for i, (title, artist) in enumerate(profile['top_tracks'], 1):
            print(f"    {i}. {title} - {artist}")
        
        print(f"\nü§ñ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
        algorithms = ['content_based', 'collaborative', 'hybrid']
        
        for algorithm in algorithms:
            print(f"\nüîÑ {algorithm.upper()} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            recommendations = get_recommendations(user_id, algorithm, 3)
            
            if recommendations:
                for i, rec in enumerate(recommendations, 1):
                    title = rec.get('title', 'Unknown')
                    artist = rec.get('artist', 'Unknown')
                    confidence = rec.get('confidence_score', rec.get('predicted_rating', 0))
                    reason = rec.get('reason', 'Unknown reason')
                    
                    print(f"  {i}. {title} - {artist}")
                    print(f"     üíØ –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: {confidence:.1%}")
                    print(f"     üí° –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            else:
                print("  ‚ùå –ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
        
        print(f"\n")
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    print(f"{'='*60}")
    print("üìä –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–á")
    print(f"{'='*60}")
    
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å —Ä—ñ–∑–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä—ñ–∑–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó...\n")
    
    user_recommendations = {}
    for user_id in test_users[:3]:  # –ë–µ—Ä—î–º–æ –ø–µ—Ä—à–∏—Ö 3
        recs = get_recommendations(user_id, 'hybrid', 5)
        if recs:
            user_recommendations[user_id] = [rec.get('title', 'Unknown') for rec in recs]
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
    all_recs = []
    for user_id, recs in user_recommendations.items():
        profile = get_user_profile(user_id)
        print(f"üë§ {profile.get('name', f'User {user_id}')}:")
        for i, rec in enumerate(recs, 1):
            print(f"  {i}. {rec}")
        all_recs.extend(recs)
        print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
    unique_recs = set(all_recs)
    total_recs = len(all_recs)
    
    print(f"üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–á:")
    print(f"   üìù –í—Å—å–æ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π: {total_recs}")
    print(f"   üéØ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤: {len(unique_recs)}")
    print(f"   üìä –†—ñ–≤–µ–Ω—å —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ: {len(unique_recs)/total_recs:.1%}")
    
    if len(unique_recs)/total_recs > 0.7:
        print(f"   ‚úÖ –í–Ü–î–ú–Ü–ù–ù–û! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å —Ä—ñ–∑–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
    elif len(unique_recs)/total_recs > 0.5:
        print(f"   üëç –î–û–ë–†–ï! –ü–æ–º—ñ—Ä–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è")
    else:
        print(f"   ‚ö†Ô∏è  –ü–û–¢–†–ï–ë–£–Ñ –ü–û–ö–†–ê–©–ï–ù–ù–Ø! –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑–∞–Ω–∞–¥—Ç–æ —Å—Ö–æ–∂—ñ")

if __name__ == "__main__":
    test_personal_recommendations() 