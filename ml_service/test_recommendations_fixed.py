#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è API —Ñ–æ—Ä–º–∞—Ç—É
"""

import requests
import json
import time

def test_ml_service():
    """–¢–µ—Å—Ç—É—î–º–æ ML —Å–µ—Ä–≤—ñ—Å"""
    
    base_url = "http://localhost:8000"
    
    print("üéµ –¢–µ—Å—Ç—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
    print("=" * 50)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É
    print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É...")
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        health_data = response.json()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {health_data['status']}")
        print(f"üìä –ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ: {health_data['models_trained']}")
        
        if not health_data['models_trained']:
            print("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ. –¢—Ä–µ–Ω—É—î–º–æ...")
            
            # 2. –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
            train_response = requests.post(f"{base_url}/train", timeout=30)
            train_data = train_response.json()
            print(f"üéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {train_data['success']}")
            print(f"üìà –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {train_data['message']}")
            
            if train_data['success']:
                print("‚úÖ –ú–æ–¥–µ–ª—ñ —É—Å–ø—ñ—à–Ω–æ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ!")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
                return
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–≤—ñ—Å—É: {e}")
        return
    
    print("\n" + "=" * 50)
    
    # 3. –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    test_user_id = 1
    test_cases = [
        ("Hybrid", f"{base_url}/recommend"),
        ("Content", f"{base_url}/recommend/content"),
        ("Collaborative", f"{base_url}/recommend/collaborative"),
        ("SVD", f"{base_url}/recommend/svd")
    ]
    
    for algorithm, endpoint in test_cases:
        print(f"\nüîç –¢–µ—Å—Ç—É—î–º–æ {algorithm} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó...")
        
        try:
            payload = {
                "user_id": test_user_id,
                "limit": 5
            }
            
            response = requests.post(endpoint, json=payload, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"‚úÖ {algorithm}: {data['success']}")
                print(f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {data['message']}")
                print(f"‚è±Ô∏è –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {data.get('processing_time', 0):.3f}s")
                print(f"üîß –ê–ª–≥–æ—Ä–∏—Ç–º: {data.get('algorithm_used', 'Unknown')}")
                
                if data['success'] and data['recommendations']:
                    print(f"üéµ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ({len(data['recommendations'])}):")
                    
                    for i, rec in enumerate(data['recommendations'][:3], 1):
                        print(f"  {i}. üéµ {rec['artist']}")
                        print(f"     üìä –†–µ–π—Ç–∏–Ω–≥: {rec['predicted_rating']:.2f}")
                        print(f"     üéØ –ü—Ä–∏—á–∏–Ω–∞: {rec['reason']}")
                        
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑ features
                        if rec.get('features'):
                            features = rec['features']
                            if features.get('title') and features['title'] != 'Unknown':
                                print(f"     üè∑Ô∏è –ù–∞–∑–≤–∞: {features['title']}")
                            if features.get('genre') and features['genre'] != 'Unknown':
                                print(f"     üéº –ñ–∞–Ω—Ä: {features['genre']}")
                        print()
                else:
                    print(f"‚ö†Ô∏è –ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è {algorithm}")
                    
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ HTTP {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è {algorithm}: {e}")
    
    print("\n" + "=" * 50)
    print("üéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_ml_service() 