#!/usr/bin/env python3
"""
üöÄ –¢–µ—Å—Ç —Ä—ñ–∑–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ–∂–µ–Ω –∞–ª–≥–æ—Ä–∏—Ç–º –¥–∞—î —Ä—ñ–∑–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
"""

import requests
import json
import time

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
ML_SERVICE_URL = "http://localhost:8001"
USER_ID = 1
LIMIT = 10

def test_health():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        response = requests.get(f"{ML_SERVICE_URL}/health", timeout=5)
        print("‚úÖ ML —Å–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î!")
        return True
    except Exception as e:
        print(f"‚ùå ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        return False

def train_models():
    """–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π"""
    print("\nüèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
    try:
        response = requests.post(f"{ML_SERVICE_URL}/train", timeout=30)
        result = response.json()
        if result.get('success'):
            print("‚úÖ –ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ!")
            print(f"   –ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {result.get('training_time', 0):.2f}s")
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {result.get('message')}")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
        return False

def test_algorithm(algorithm_name, endpoint, user_id=USER_ID, limit=LIMIT):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–∫—Ä–µ–º–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É"""
    print(f"\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {algorithm_name}...")
    
    try:
        payload = {"user_id": user_id, "limit": limit}
        response = requests.post(f"{ML_SERVICE_URL}{endpoint}", 
                               json=payload, 
                               timeout=10)
        
        result = response.json()
        
        if result.get('success'):
            recommendations = result.get('recommendations', [])
            print(f"‚úÖ {algorithm_name}: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            for i, rec in enumerate(recommendations[:3]):
                track_title = rec.get('title', 'Unknown')
                artist = rec.get('artist', 'Unknown')
                rating = rec.get('predicted_rating', 0)
                reason = rec.get('reason', 'No reason')
                algorithm = rec.get('algorithm', 'Unknown')
                
                print(f"   {i+1}. {track_title} - {artist}")
                print(f"      –†–µ–π—Ç–∏–Ω–≥: {rating:.2f} | –ê–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
                print(f"      –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            
            return recommendations
        else:
            print(f"‚ùå {algorithm_name}: {result.get('message')}")
            return []
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {algorithm_name}: {e}")
        return []

def compare_algorithms():
    """–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä—ñ–∑–Ω–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤"""
    print("\nüîç –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤—Å—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏
    algorithms = {
        "Content-Based": "/recommend/content",
        "Collaborative KNN": "/recommend/collaborative", 
        "SVD Matrix Factorization": "/recommend/svd",
        "Hybrid (All Combined)": "/recommend"
    }
    
    results = {}
    for name, endpoint in algorithms.items():
        results[name] = test_algorithm(name, endpoint)
    
    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ—Å—Ç—å
    print("\nüìä –ê–ù–ê–õ–Ü–ó –†–Ü–ó–ù–û–ú–ê–ù–Ü–¢–ù–û–°–¢–Ü:")
    print("=" * 50)
    
    all_tracks = set()
    for name, recs in results.items():
        track_ids = {rec.get('track_id') for rec in recs}
        all_tracks.update(track_ids)
        print(f"{name}: {len(track_ids)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤")
    
    print(f"\n–ó–∞–≥–∞–ª–æ–º —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤: {len(all_tracks)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Å—ñ—á–µ–Ω—å
    print("\nüîó –ü–ï–†–ï–°–Ü–ß–ï–ù–ù–Ø –ê–õ–ì–û–†–ò–¢–ú–Ü–í:")
    algorithms_list = list(results.keys())
    for i, alg1 in enumerate(algorithms_list):
        for alg2 in algorithms_list[i+1:]:
            tracks1 = {rec.get('track_id') for rec in results[alg1]}
            tracks2 = {rec.get('track_id') for rec in results[alg2]}
            
            intersection = tracks1.intersection(tracks2)
            similarity = len(intersection) / max(len(tracks1), len(tracks2)) if tracks1 or tracks2 else 0
            
            print(f"   {alg1} ‚à© {alg2}: {len(intersection)} —Å–ø—ñ–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤ ({similarity:.1%})")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üéµ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ML –ê–õ–ì–û–†–ò–¢–ú–Ü–í –ú–£–ó–ò–ß–ù–ò–• –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–ô")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—É
    if not test_health():
        print("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å ML —Å–µ—Ä–≤—ñ—Å —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    
    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
    if not train_models():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ.")
        return
    
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
    compare_algorithms()
    
    print("\nüéØ –í–ò–°–ù–û–í–û–ö:")
    print("–Ø–∫—â–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–æ–Ω–∏ –ø–æ–≤–∏–Ω–Ω—ñ –¥–∞–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó!")
    print("‚úÖ Content-Based: —Ñ–æ–∫—É—Å –Ω–∞ –∞—É–¥—ñ–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    print("‚úÖ Collaborative KNN: —Ñ–æ–∫—É—Å –Ω–∞ —Å—Ö–æ–∂–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤") 
    print("‚úÖ SVD: —Ñ–æ–∫—É—Å –Ω–∞ –ª–∞—Ç–µ–Ω—Ç–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏")
    print("‚úÖ Hybrid: –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –≤—Å—ñ—Ö –ø—ñ–¥—Ö–æ–¥—ñ–≤")

if __name__ == "__main__":
    main() 