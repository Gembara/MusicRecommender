#!/usr/bin/env python3
import requests
import urllib3
import sqlite3
import pandas as pd

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def check_database_users():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:")
    
    try:
        conn = sqlite3.connect('MusicRecommender.db')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        df_users = pd.read_sql_query("SELECT * FROM Users", conn)
        print(f"üë• –ó–Ω–∞–π–¥–µ–Ω–æ {len(df_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:")
        for _, user in df_users.iterrows():
            print(f"   ID: {user['UserId']}, –Ü–º'—è: {user['UserName']}, Email: {user['Email']}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Favorites
        df_favorites = pd.read_sql_query("SELECT UserId, COUNT(*) as count FROM Favorites GROUP BY UserId", conn)
        print(f"\n‚ù§Ô∏è –£–ª—é–±–ª–µ–Ω—ñ —Ç—Ä–µ–∫–∏:")
        for _, fav in df_favorites.iterrows():
            print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {fav['UserId']}: {fav['count']} —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ History
        df_history = pd.read_sql_query("SELECT UserId, COUNT(*) as count FROM History GROUP BY UserId", conn)
        print(f"\nüìö –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è:")
        for _, hist in df_history.iterrows():
            print(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {hist['UserId']}: {hist['count']} –∑–∞–ø–∏—Å—ñ–≤ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó")
            
        conn.close()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if not df_users.empty:
            return int(df_users['UserId'].iloc[-1])  # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –∑–≤–∏—á–∞–π–Ω–∏–π int
        return None
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def test_ml_with_user_id(user_id):
    """–¢–µ—Å—Ç—É—î–º–æ ML –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print(f"\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}:")
    
    BASE_URL = "https://localhost:5001"
    
    algorithms = ['content_based', 'collaborative', 'hybrid']
    
    for algorithm in algorithms:
        try:
            data = {
                "Algorithm": algorithm,
                "NumberOfRecommendations": 5,
                "UserId": user_id  # –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            }
            
            response = requests.post(
                f"{BASE_URL}/ML/GetMLRecommendations",
                json=data,
                verify=False,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success') and result.get('data'):
                    recommendations = result['data']['recommendations']
                    print(f"‚úÖ {algorithm}: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                    for i, rec in enumerate(recommendations[:3], 1):
                        title = rec.get('title', 'Unknown')
                        artist = rec.get('artist', 'Unknown')
                        confidence = rec.get('confidence_score', 0) * 100
                        print(f"   {i}. {title} - {artist} ({confidence:.1f}%)")
                else:
                    print(f"‚ùå {algorithm}: {result.get('message', '–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π')}")
            else:
                print(f"‚ùå {algorithm}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {algorithm}: –ü–æ–º–∏–ª–∫–∞ - {e}")

if __name__ == "__main__":
    print("üéµ –¢–µ—Å—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
    print("=" * 50)
    
    user_id = check_database_users()
    
    if user_id:
        # –°–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—ñ
        print(f"\nüîÑ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
        try:
            response = requests.post("https://localhost:5001/ML/TrainModels", verify=False)
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ {result.get('message', '–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ')}")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
            
        print(f"\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1:")
        test_user_id = 1  # –ó–º—ñ–Ω—é—î–º–æ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Vens
        test_ml_with_user_id(test_user_id)
    else:
        print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö") 