#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ API
"""

import requests
import json
import time

# –ë–∞–∑–æ–≤–∏–π URL –¥–æ–¥–∞—Ç–∫—É
BASE_URL = "https://localhost:5001"

def test_add_data():
    """–î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ API"""
    print("üîÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    try:
        response = requests.post(
            f"{BASE_URL}/Test/AddTestData",
            verify=False  # –Ü–≥–Ω–æ—Ä—É—î–º–æ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –¥–ª—è localhost
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print(f"‚úÖ {result.get('message')}")
                return True
            else:
                print(f"‚ùå {result.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP {response.status_code}: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def check_ml_service():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω ML —Å–µ—Ä–≤—ñ—Å—É"""
    print("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ML —Å–µ—Ä–≤—ñ—Å—É...")
    
    try:
        response = requests.get(
            f"{BASE_URL}/ML/CheckMLServiceStatus",
            verify=False
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print(f"‚úÖ ML —Å–µ—Ä–≤—ñ—Å: {result.get('status')}")
                return True
            else:
                print(f"‚ùå ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return False
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def train_ml_models():
    """–¢—Ä–µ–Ω—É–≤–∞—Ç–∏ ML –º–æ–¥–µ–ª—ñ"""
    print("üîÑ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è ML –º–æ–¥–µ–ª–µ–π...")
    
    try:
        response = requests.post(
            f"{BASE_URL}/ML/TrainModels",
            verify=False
        )
        
        if response.status_code == 200:
            result = response.json()
            if result.get('success'):
                print(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {result.get('message')}")
                return True
            else:
                print(f"‚ùå –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {result.get('message')}")
                return False
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        return False

def test_ml_recommendations():
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ ML —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
    print("üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
    
    algorithms = ['content_based', 'collaborative', 'hybrid']
    
    for algorithm in algorithms:
        print(f"\nüéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è {algorithm}...")
        
        try:
            data = {
                "Algorithm": algorithm,
                "NumberOfRecommendations": 5
            }
            
            response = requests.post(
                f"{BASE_URL}/ML/GetMLRecommendations",
                json=data,
                verify=False,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success') and result.get('data'):
                    recommendations = result['data']['recommendations']
                    print(f"‚úÖ {algorithm}: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
                    
                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                    for i, rec in enumerate(recommendations[:3], 1):
                        title = rec.get('title', 'Unknown')
                        artist = rec.get('artist', 'Unknown')
                        confidence = rec.get('confidence_score', 0) * 100
                        print(f"   {i}. {title} - {artist} ({confidence:.1f}%)")
                else:
                    print(f"‚ùå {algorithm}: {result.get('message', '–ù–µ–º–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π')}")
            else:
                print(f"‚ùå {algorithm}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå {algorithm}: –ü–æ–º–∏–ª–∫–∞ - {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üéµ Music Recommender - ML Test Suite")
    print("=" * 50)
    
    # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ ML —Å–µ—Ä–≤—ñ—Å
    if not check_ml_service():
        print("\n‚ùå ML —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å Python ML —Å–µ—Ä–≤—ñ—Å –Ω–∞ –ø–æ—Ä—Ç—É 8000")
        return
    
    # –ö—Ä–æ–∫ 2: –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    if not test_add_data():
        print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
        return
    
    # –ö—Ä–æ–∫ 3: –¢—Ä–µ–Ω—É—î–º–æ –º–æ–¥–µ–ª—ñ
    print("\n" + "="*30)
    if not train_ml_models():
        print("\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ")
        return
    
    # –ö—Ä–æ–∫ 4: –¢–µ—Å—Ç—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
    print("\n" + "="*30)
    test_ml_recommendations()
    
    print("\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    # –í–∏–º–∏–∫–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ SSL
    import urllib3
    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    main() 