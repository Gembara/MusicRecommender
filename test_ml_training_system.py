"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ ML —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ä–æ–±–æ—Ç—É –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å —Ç–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è
"""

import sqlite3
import requests
import json
from datetime import datetime
import sys

def test_database_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ"""
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ë–î...")
    
    conn = sqlite3.connect("MusicRecommender.db")
    cursor = conn.cursor()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
    tables = ['MLTrainingData', 'MLModelMetrics', 'MLUserProfiles', 'TrackSimilarity', 'UserSimilarity']
    
    for table in tables:
        cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name=?", (table,))
        if cursor.fetchone()[0] > 0:
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—è {table} —ñ—Å–Ω—É—î")
        else:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü—è {table} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
    
    conn.close()

def test_data_collection_api():
    """–¢–µ—Å—Ç—É—î–º–æ API –¥–ª—è –∑–±–æ—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö...")
    
    base_url = "http://localhost:5000"  # Adjust if needed
    
    try:
        # –¢–µ—Å—Ç –∑–±–æ—Ä—É —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        response = requests.post(f"{base_url}/api/MLTraining/collect-training-data")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–∏–π: {data.get('message', 'N/A')}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö: {response.status_code}")
    
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –¥–æ–¥–∞—Ç–æ–∫ —Å–ø–æ—á–∞—Ç–∫—É.")
        return False
    
    return True

def test_training_data_stats_api():
    """–¢–µ—Å—Ç—É—î–º–æ API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    print("\nüìä –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    base_url = "http://localhost:5000"
    
    try:
        response = requests.get(f"{base_url}/api/MLTraining/training-data/stats")
        if response.status_code == 200:
            stats = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:")
            print(f"   - –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {stats.get('totalTrainingRecords', 0)}")
            print(f"   - –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('uniqueUsers', 0)}")
            print(f"   - –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤: {stats.get('uniqueTracks', 0)}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
    
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")

def create_sample_training_data():
    """–°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è ML —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"""
    print("\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    conn = sqlite3.connect("MusicRecommender.db")
    cursor = conn.cursor()
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    sample_interactions = [
        (1, "test_track_1", 1, 0.8, "2024-01-01 10:00:00", 150, 0, 1, 0),  # User 1 liked track 1
        (1, "test_track_2", 4, 0.2, "2024-01-01 10:05:00", 30, 1, 0, 0),   # User 1 skipped track 2
        (2, "test_track_1", 2, 0.9, "2024-01-01 11:00:00", 180, 0, 1, 1),  # User 2 loved track 1
        (2, "test_track_3", 1, 0.7, "2024-01-01 11:05:00", 120, 0, 0, 0),  # User 2 played track 3
    ]
    
    for interaction in sample_interactions:
        cursor.execute("""
            INSERT OR IGNORE INTO UserSongInteractions 
            (UserId, SpotifyTrackId, InteractionType, Rating, InteractionTime, PlayDuration, IsSkipped, IsLiked, IsRepeat)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, interaction)
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ—ñ—á—ñ —Ç—Ä–µ–∫—ñ–≤
    sample_features = [
        ("test_track_1", 0.8, 0.7, 0.9, 120.0, 0.1, 0.0, 0.1, -5.0, 80.0, 180000, 1, 1, 4, "Pop", "Test Artist 1"),
        ("test_track_2", 0.3, 0.4, 0.2, 80.0, 0.8, 0.5, 0.0, -10.0, 60.0, 200000, 2, 0, 4, "Acoustic", "Test Artist 2"),
        ("test_track_3", 0.9, 0.9, 0.8, 140.0, 0.0, 0.0, 0.0, -3.0, 90.0, 160000, 5, 1, 4, "Electronic", "Test Artist 3"),
    ]
    
    for features in sample_features:
        cursor.execute("""
            INSERT OR IGNORE INTO SongFeatures 
            (SpotifyTrackId, Danceability, Energy, Valence, Tempo, Acousticness, Instrumentalness, 
             Speechiness, Loudness, Popularity, DurationMs, Key, Mode, TimeSignature, Genre, Artist)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, features)
    
    conn.commit()
    conn.close()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ")

def check_training_data():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ MLTrainingData"""
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    conn = sqlite3.connect("MusicRecommender.db")
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM MLTrainingData")
    count = cursor.fetchone()[0]
    
    if count > 0:
        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {count} –∑–∞–ø–∏—Å—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—É
        cursor.execute("SELECT * FROM MLTrainingData LIMIT 1")
        sample = cursor.fetchone()
        if sample:
            print(f"   –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Å—É: UserId={sample[1]}, TrackId={sample[2]}, Rating={sample[20]}")
    else:
        print("‚ùå –ù–µ–º–∞—î —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö")
    
    conn.close()

def test_user_profile_creation():
    """–¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("\nüë§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
    
    base_url = "http://localhost:5000"
    
    try:
        response = requests.post(f"{base_url}/api/MLTraining/user-profile/1")
        if response.status_code == 200:
            profile = response.json()
            print(f"‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ:")
            if 'profile' in profile:
                prefs = profile['profile'].get('preferences', {})
                print(f"   - Danceability: {prefs.get('danceability', 'N/A'):.3f}")
                print(f"   - Energy: {prefs.get('energy', 'N/A'):.3f}")
                print(f"   - Valence: {prefs.get('valence', 'N/A'):.3f}")
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é: {response.status_code}")
    
    except requests.exceptions.ConnectionError:
        print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")

def main():
    print("üéØ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ ML —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
    print("=" * 50)
    
    # 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    test_database_structure()
    
    # 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
    create_sample_training_data()
    
    # 3. –¢–µ—Å—Ç—É—î–º–æ API (—è–∫—â–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π)
    print(f"\n‚ö†Ô∏è –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è API –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ—é: dotnet run")
    print(f"–ü—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–Ω–∞ —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ API:")
    
    response = input("\n–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π? (y/n): ").lower()
    if response == 'y':
        if test_data_collection_api():
            check_training_data()
            test_training_data_stats_api()
            test_user_profile_creation()
    
    print("\n‚ú® –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: dotnet run")
    print("2. –ó—Ä–æ–±—ñ—Ç—å POST –∑–∞–ø–∏—Ç: /api/MLTraining/collect-training-data")
    print("3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: GET /api/MLTraining/training-data/stats")
    print("4. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: POST /api/MLTraining/user-profile/{userId}")

if __name__ == "__main__":
    main() 