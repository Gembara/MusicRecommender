import requests
import json

# –¢–µ—Å—Ç—É—î–º–æ ML service
base_url = "http://localhost:8000"

def test_health():
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—É...")
    try:
        response = requests.get(f"{base_url}/health")
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é—î: {data.get('message', 'OK')}")
            print(f"–ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ: {data.get('models_trained', False)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False

def test_train():
    print("\nüéØ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
    try:
        response = requests.post(f"{base_url}/train")
        print(f"Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {data.get('message', 'OK')}")
            print(f"–ß–∞—Å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {data.get('training_time', 0):.2f}—Å")
            return True
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {e}")
        return False

def test_recommendations(user_id=1):
    print(f"\nüéµ –¢–µ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}...")
    
    # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    algorithms = [
        ("hybrid", "–ì—ñ–±—Ä–∏–¥–Ω—ñ"),
        ("content", "Content-Based"),
        ("collaborative", "Collaborative"),
        ("svd", "SVD")
    ]
    
    for algo_endpoint, algo_name in algorithms:
        print(f"\n--- {algo_name} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó ---")
        try:
            if algo_endpoint == "hybrid":
                url = f"{base_url}/recommend"
            else:
                url = f"{base_url}/recommend/{algo_endpoint}"
            
            payload = {
                "user_id": user_id,
                "limit": 5
            }
            
            response = requests.post(url, json=payload)
            print(f"Status: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ –ê–ª–≥–æ—Ä–∏—Ç–º: {data.get('algorithm_used', algo_name)}")
                print(f"–ß–∞—Å –æ–±—Ä–æ–±–∫–∏: {data.get('processing_time', 0):.3f}—Å")
                
                recommendations = data.get('recommendations', [])
                print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π:")
                
                for i, rec in enumerate(recommendations, 1):
                    track_id = rec.get('track_id', 'Unknown ID')
                    artist = rec.get('artist', 'Unknown Artist')
                    title = rec.get('features', {}).get('title', 'Unknown Track')
                    rating = rec.get('predicted_rating', 0)
                    reason = rec.get('reason', 'No reason')
                    
                    print(f"  {i}. {artist} - {title}")
                    print(f"     ID: {track_id}")
                    print(f"     –†–µ–π—Ç–∏–Ω–≥: {rating:.2f}")
                    print(f"     –ü—Ä–∏—á–∏–Ω–∞: {reason}")
                    print()
                    
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {algo_name}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {algo_name}: {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ML —Å–∏—Å—Ç–µ–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
    if not test_health():
        print("‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!")
        exit(1)
    
    # –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    if not test_train():
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ!")
        exit(1)
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1
    test_recommendations(1)
    
    print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") 