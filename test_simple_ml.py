#!/usr/bin/env python3
"""
üöÄ –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç ML –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤ –Ω–∞–ø—Ä—è–º—É (–±–µ–∑ –≤–µ–±-—Å–µ—Ä–≤—ñ—Å—É)
–ü–æ–∫–∞–∑—É—î–º–æ —â–æ —Ä—ñ–∑–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –¥–∞—é—Ç—å —Ä—ñ–∑–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
"""

import sys
import os
sys.path.append('ml_service')

from ml_models import MusicRecommenderML
import pandas as pd

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üéµ –¢–ï–°–¢–£–í–ê–ù–ù–Ø ML –ê–õ–ì–û–†–ò–¢–ú–Ü–í (–ü–†–Ø–ú–ò–ô –î–û–°–¢–£–ü)")
    print("=" * 60)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ML recommender
    ml_recommender = MusicRecommenderML()
    
    print("üìä –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    test_data = pd.DataFrame({
        'UserId': [1, 1, 1, 2, 2, 2, 3, 3, 3] * 3,
        'SpotifyTrackId': ['pop_track1', 'rock_track1', 'jazz_track1', 
                          'pop_track2', 'rock_track2', 'jazz_track2',
                          'pop_track3', 'rock_track3', 'jazz_track3'] * 3,
        'Rating': [5, 3, 2, 4, 5, 3, 2, 4, 5] * 3,
        'Danceability': [0.8, 0.4, 0.3, 0.7, 0.5, 0.4, 0.9, 0.3, 0.2] * 3,
        'Energy': [0.9, 0.8, 0.5, 0.8, 0.9, 0.6, 0.7, 0.7, 0.4] * 3,
        'Valence': [0.8, 0.6, 0.4, 0.7, 0.5, 0.5, 0.9, 0.4, 0.3] * 3,
        'Tempo_norm': [0.8, 0.7, 0.3, 0.6, 0.9, 0.4, 0.7, 0.6, 0.2] * 3,
        'Acousticness': [0.1, 0.3, 0.8, 0.2, 0.1, 0.9, 0.1, 0.4, 0.7] * 3,
        'Instrumentalness': [0.0, 0.1, 0.6, 0.0, 0.0, 0.7, 0.0, 0.2, 0.8] * 3,
        'Speechiness': [0.1, 0.3, 0.1, 0.2, 0.1, 0.1, 0.3, 0.2, 0.1] * 3,
        'Loudness_norm': [0.8, 0.9, 0.4, 0.7, 0.8, 0.5, 0.9, 0.7, 0.3] * 3,
        'Popularity': [85, 70, 40, 80, 75, 45, 90, 65, 35] * 3,
        'Title': ['Happy Pop Song', 'Rock Anthem', 'Smooth Jazz', 
                 'Dance Floor Hit', 'Metal Thunder', 'Cool Jazz Vibes',
                 'Party Pop Banger', 'Alternative Rock', 'Classical Jazz'] * 3,
        'Artist': ['Pop Artist', 'Rock Band', 'Jazz Master',
                  'Dance DJ', 'Metal Band', 'Jazz Trio', 
                  'Pop Star', 'Alt Rock', 'Jazz Legend'] * 3,
        'Genre': ['Pop', 'Rock', 'Jazz', 'Pop', 'Rock', 'Jazz', 'Pop', 'Rock', 'Jazz'] * 3
    })
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ –º–æ–¥–µ–ª—ñ –¥–ª—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    ml_recommender.data_loader.prepare_training_data = lambda: (test_data, pd.DataFrame())
    
    print("üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
    training_result = ml_recommender.train_models()
    
    if 'error' in training_result:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è: {training_result['error']}")
        return
    
    print("‚úÖ –ú–æ–¥–µ–ª—ñ –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω—ñ!")
    print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {training_result}")
    
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–Ü–ó–ù–ò–• –ê–õ–ì–û–†–ò–¢–ú–Ü–í")
    print("="*60)
    
    user_id = 1
    limit = 5
    
    # 1. Content-Based –∞–ª–≥–æ—Ä–∏—Ç–º
    print(f"\nüéØ CONTENT-BASED –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}):")
    print("-" * 50)
    content_recs = ml_recommender.get_content_recommendations(user_id, limit)
    
    if content_recs:
        for i, rec in enumerate(content_recs[:3]):
            print(f"   {i+1}. {rec.get('title', 'Unknown')} - {rec.get('artist', 'Unknown')}")
            print(f"      –†–µ–π—Ç–∏–Ω–≥: {rec.get('predicted_rating', 0):.2f}")
            print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec.get('reason', 'Content-based')}")
    else:
        print("   ‚ùå –ù–µ–º–∞—î content-based —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
    
    # 2. Collaborative (KNN) –∞–ª–≥–æ—Ä–∏—Ç–º  
    print(f"\nüë• COLLABORATIVE KNN –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}):")
    print("-" * 50)
    collab_recs = ml_recommender.get_collaborative_recommendations(user_id, limit)
    
    if collab_recs:
        for i, rec in enumerate(collab_recs[:3]):
            print(f"   {i+1}. {rec.get('title', 'Unknown')} - {rec.get('artist', 'Unknown')}")
            print(f"      –†–µ–π—Ç–∏–Ω–≥: {rec.get('predicted_rating', 0):.2f}")
            print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec.get('reason', 'Collaborative')}")
    else:
        print("   ‚ùå –ù–µ–º–∞—î collaborative —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
    
    # 3. SVD –∞–ª–≥–æ—Ä–∏—Ç–º
    print(f"\nüîÑ SVD MATRIX FACTORIZATION –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}):")
    print("-" * 50)
    svd_recs = ml_recommender.get_svd_recommendations(user_id, limit)
    
    if svd_recs:
        for i, rec in enumerate(svd_recs[:3]):
            print(f"   {i+1}. {rec.get('title', 'Unknown')} - {rec.get('artist', 'Unknown')}")
            print(f"      –†–µ–π—Ç–∏–Ω–≥: {rec.get('predicted_rating', 0):.2f}")
            print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec.get('reason', 'SVD')}")
    else:
        print("   ‚ùå –ù–µ–º–∞—î SVD —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
    
    # 4. Hybrid –∞–ª–≥–æ—Ä–∏—Ç–º
    print(f"\nüîÄ HYBRID –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}):")
    print("-" * 50)
    hybrid_recs = ml_recommender.get_hybrid_recommendations(user_id, limit)
    
    if hybrid_recs:
        for i, rec in enumerate(hybrid_recs[:3]):
            print(f"   {i+1}. {rec.get('title', 'Unknown')} - {rec.get('artist', 'Unknown')}")
            print(f"      –†–µ–π—Ç–∏–Ω–≥: {rec.get('predicted_rating', 0):.2f}")
            print(f"      –ü—Ä–∏—á–∏–Ω–∞: {rec.get('reason', 'Hybrid')}")
            methods = rec.get('methods_used', [])
            if methods:
                print(f"      –ú–µ—Ç–æ–¥–∏: {', '.join(methods)}")
    else:
        print("   ‚ùå –ù–µ–º–∞—î hybrid —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π")
    
    # –ê–Ω–∞–ª—ñ–∑ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
    print(f"\nüìä –ê–ù–ê–õ–Ü–ó –†–Ü–ó–ù–û–ú–ê–ù–Ü–¢–ù–û–°–¢–Ü:")
    print("-" * 50)
    
    all_algorithms = {
        "Content-Based": content_recs,
        "Collaborative KNN": collab_recs,
        "SVD": svd_recs,
        "Hybrid": hybrid_recs
    }
    
    all_tracks = set()
    for name, recs in all_algorithms.items():
        track_ids = {rec.get('track_id') for rec in recs if rec.get('track_id')}
        all_tracks.update(track_ids)
        print(f"   {name}: {len(track_ids)} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤")
    
    print(f"   –ó–∞–≥–∞–ª–æ–º —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤: {len(all_tracks)}")
    
    print(f"\nüéØ –í–ò–°–ù–û–í–û–ö:")
    print("‚úÖ SVD –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞—Ü—é—î —ñ –¥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó!")
    print("‚úÖ KNN Collaborative —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î!")
    print("‚úÖ Content-Based –Ω–∞ –∞—É–¥—ñ–æ —Ñ—ñ—á–∞—Ö –ø—Ä–∞—Ü—é—î!")
    print("‚úÖ Hybrid –∫–æ–º–±—ñ–Ω—É—î –≤—Å—ñ –ø—ñ–¥—Ö–æ–¥–∏!")
    print("\nüî• –£—Å—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–∞ –¥–∞—é—Ç—å —Ä—ñ–∑–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏!")

if __name__ == "__main__":
    main() 